
KPD_LCD_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e78  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08000fa8  08000fa8  00010fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ffc  08000ffc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ffc  08000ffc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ffc  08000ffc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ffc  08000ffc  00010ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001000  08001000  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  2000000c  08001010  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08001010  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000336f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008d4  00000000  00000000  000233a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000008cc  00000000  00000000  00023c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000168  00000000  00000000  00024548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000120  00000000  00000000  000246b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002023  00000000  00000000  000247d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001c97  00000000  00000000  000267f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007dae  00000000  00000000  0002848a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000470  00000000  00000000  000302b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f90 	.word	0x08000f90

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08000f90 	.word	0x08000f90

08000170 <clock_init>:
uint8_t input[30] = {'\0'}; // Initialize input array
uint8_t indexz = 0;


void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	// Enable clock for GPIOA (bit 2)
	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	// Enable clock for GPIOB (bit 3)
	RCC_GPIOB_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]

}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIO_init>:

void GPIO_init()
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg;

	// Pins Configuration for 7 segment

	// a output push pull mode
	PinCfg.GPIO_PinNumber = a_7SEG;
 800019e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001a2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80001a4:	2304      	movs	r3, #4
 80001a6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80001a8:	2301      	movs	r3, #1
 80001aa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	4827      	ldr	r0, [pc, #156]	; (8000250 <GPIO_init+0xb8>)
 80001b2:	f000 fa89 	bl	80006c8 <MCAL_GPIO_Init>

	// b output push pull mode
	PinCfg.GPIO_PinNumber = b_7SEG;
 80001b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001ba:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80001bc:	2304      	movs	r3, #4
 80001be:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80001c0:	2301      	movs	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4619      	mov	r1, r3
 80001c8:	4821      	ldr	r0, [pc, #132]	; (8000250 <GPIO_init+0xb8>)
 80001ca:	f000 fa7d 	bl	80006c8 <MCAL_GPIO_Init>

	// c output push pull mode
	PinCfg.GPIO_PinNumber = c_7SEG;
 80001ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80001d4:	2304      	movs	r3, #4
 80001d6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80001d8:	2301      	movs	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4619      	mov	r1, r3
 80001e0:	481b      	ldr	r0, [pc, #108]	; (8000250 <GPIO_init+0xb8>)
 80001e2:	f000 fa71 	bl	80006c8 <MCAL_GPIO_Init>

	// d output push pull mode
	PinCfg.GPIO_PinNumber = d_7SEG;
 80001e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001ea:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80001ec:	2304      	movs	r3, #4
 80001ee:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80001f0:	2301      	movs	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4815      	ldr	r0, [pc, #84]	; (8000250 <GPIO_init+0xb8>)
 80001fa:	f000 fa65 	bl	80006c8 <MCAL_GPIO_Init>

	// e output push pull mode
	PinCfg.GPIO_PinNumber = e_7SEG;
 80001fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000202:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000204:	2304      	movs	r3, #4
 8000206:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000208:	2301      	movs	r3, #1
 800020a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4619      	mov	r1, r3
 8000210:	480f      	ldr	r0, [pc, #60]	; (8000250 <GPIO_init+0xb8>)
 8000212:	f000 fa59 	bl	80006c8 <MCAL_GPIO_Init>

	// f output push pull mode
	PinCfg.GPIO_PinNumber = f_7SEG;
 8000216:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800021a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 800021c:	2304      	movs	r3, #4
 800021e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000220:	2301      	movs	r3, #1
 8000222:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4619      	mov	r1, r3
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <GPIO_init+0xb8>)
 800022a:	f000 fa4d 	bl	80006c8 <MCAL_GPIO_Init>

	// g output push pull mode
	PinCfg.GPIO_PinNumber = g_7SEG;
 800022e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000232:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000234:	2304      	movs	r3, #4
 8000236:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000238:	2301      	movs	r3, #1
 800023a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4619      	mov	r1, r3
 8000240:	4803      	ldr	r0, [pc, #12]	; (8000250 <GPIO_init+0xb8>)
 8000242:	f000 fa41 	bl	80006c8 <MCAL_GPIO_Init>



}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40010c00 	.word	0x40010c00

08000254 <exponent>:



uint32_t exponent(uint8_t base,uint8_t exp){
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	460a      	mov	r2, r1
 800025e:	71fb      	strb	r3, [r7, #7]
 8000260:	4613      	mov	r3, r2
 8000262:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8000264:	2301      	movs	r3, #1
 8000266:	60fb      	str	r3, [r7, #12]
	while (exp != 0) {
 8000268:	e007      	b.n	800027a <exponent+0x26>
		result = base * result;
 800026a:	79fa      	ldrb	r2, [r7, #7]
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	fb02 f303 	mul.w	r3, r2, r3
 8000272:	60fb      	str	r3, [r7, #12]
		--exp;
 8000274:	79bb      	ldrb	r3, [r7, #6]
 8000276:	3b01      	subs	r3, #1
 8000278:	71bb      	strb	r3, [r7, #6]
	while (exp != 0) {
 800027a:	79bb      	ldrb	r3, [r7, #6]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d1f4      	bne.n	800026a <exponent+0x16>
	}
	return result;
 8000280:	68fb      	ldr	r3, [r7, #12]
}
 8000282:	4618      	mov	r0, r3
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <main>:



int main(void)
{
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
	clock_init();
 8000292:	f7ff ff6d 	bl	8000170 <clock_init>
	GPIO_init();
 8000296:	f7ff ff7f 	bl	8000198 <GPIO_init>


	uint8_t Value;


	Lcd_ES_tsendString("Hello STM32");
 800029a:	48ad      	ldr	r0, [pc, #692]	; (8000550 <main+0x2c4>)
 800029c:	f000 fdac 	bl	8000df8 <Lcd_ES_tsendString>
	wait_ms(500);
 80002a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002a4:	f000 fc2c 	bl	8000b00 <wait_ms>
	lcd_ES_tclear();
 80002a8:	f000 fc46 	bl	8000b38 <lcd_ES_tclear>

	for(uint8_t i=0;i<=10;i++)
 80002ac:	2300      	movs	r3, #0
 80002ae:	71fb      	strb	r3, [r7, #7]
 80002b0:	e010      	b.n	80002d4 <main+0x48>
	{
		MCAL_GPIO_WritePort(GPIOB, sevSegArray[i] << 8);
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	4aa7      	ldr	r2, [pc, #668]	; (8000554 <main+0x2c8>)
 80002b6:	5cd3      	ldrb	r3, [r2, r3]
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	021b      	lsls	r3, r3, #8
 80002bc:	b29b      	uxth	r3, r3
 80002be:	4619      	mov	r1, r3
 80002c0:	48a5      	ldr	r0, [pc, #660]	; (8000558 <main+0x2cc>)
 80002c2:	f000 faae 	bl	8000822 <MCAL_GPIO_WritePort>
		wait_ms(1000);
 80002c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ca:	f000 fc19 	bl	8000b00 <wait_ms>
	for(uint8_t i=0;i<=10;i++)
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	3301      	adds	r3, #1
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	2b0a      	cmp	r3, #10
 80002d8:	d9eb      	bls.n	80002b2 <main+0x26>
	}


	Lcd_ES_tInit();
 80002da:	f000 fbb3 	bl	8000a44 <Lcd_ES_tInit>
	KPD_init();
 80002de:	f000 faaf 	bl	8000840 <KPD_init>
	lcd_ES_tclear();
 80002e2:	f000 fc29 	bl	8000b38 <lcd_ES_tclear>
	Lcd_ES_tsendString("Calculator ready");
 80002e6:	489d      	ldr	r0, [pc, #628]	; (800055c <main+0x2d0>)
 80002e8:	f000 fd86 	bl	8000df8 <Lcd_ES_tsendString>
	wait_ms(500);
 80002ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002f0:	f000 fc06 	bl	8000b00 <wait_ms>
	lcd_ES_tclear();
 80002f4:	f000 fc20 	bl	8000b38 <lcd_ES_tclear>
	while (1)
	{



		KPD_ES_tGetKeyPressed(&Value);
 80002f8:	1dbb      	adds	r3, r7, #6
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fb10 	bl	8000920 <KPD_ES_tGetKeyPressed>
		if (Value != KPD_U8_NOT_PRESSED)
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	2bff      	cmp	r3, #255	; 0xff
 8000304:	d0f8      	beq.n	80002f8 <main+0x6c>
		{
			input[indexz] = Value; // Store input in array
 8000306:	4b96      	ldr	r3, [pc, #600]	; (8000560 <main+0x2d4>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	461a      	mov	r2, r3
 800030c:	79b9      	ldrb	r1, [r7, #6]
 800030e:	4b95      	ldr	r3, [pc, #596]	; (8000564 <main+0x2d8>)
 8000310:	5499      	strb	r1, [r3, r2]
			Lcd_ES_tsendChar(input[indexz]);
 8000312:	4b93      	ldr	r3, [pc, #588]	; (8000560 <main+0x2d4>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	461a      	mov	r2, r3
 8000318:	4b92      	ldr	r3, [pc, #584]	; (8000564 <main+0x2d8>)
 800031a:	5c9b      	ldrb	r3, [r3, r2]
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fcc1 	bl	8000ca4 <Lcd_ES_tsendChar>
			indexz++; // Increment index
 8000322:	4b8f      	ldr	r3, [pc, #572]	; (8000560 <main+0x2d4>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	3301      	adds	r3, #1
 8000328:	b2da      	uxtb	r2, r3
 800032a:	4b8d      	ldr	r3, [pc, #564]	; (8000560 <main+0x2d4>)
 800032c:	701a      	strb	r2, [r3, #0]

			switch (input[indexz - 1])
 800032e:	4b8c      	ldr	r3, [pc, #560]	; (8000560 <main+0x2d4>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	3b01      	subs	r3, #1
 8000334:	4a8b      	ldr	r2, [pc, #556]	; (8000564 <main+0x2d8>)
 8000336:	5cd3      	ldrb	r3, [r2, r3]
 8000338:	3b2a      	subs	r3, #42	; 0x2a
 800033a:	2b19      	cmp	r3, #25
 800033c:	d8dc      	bhi.n	80002f8 <main+0x6c>
 800033e:	a201      	add	r2, pc, #4	; (adr r2, 8000344 <main+0xb8>)
 8000340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000344:	080003ad 	.word	0x080003ad
 8000348:	080003ad 	.word	0x080003ad
 800034c:	080002f9 	.word	0x080002f9
 8000350:	080003ad 	.word	0x080003ad
 8000354:	080002f9 	.word	0x080002f9
 8000358:	080003ad 	.word	0x080003ad
 800035c:	080002f9 	.word	0x080002f9
 8000360:	080002f9 	.word	0x080002f9
 8000364:	080002f9 	.word	0x080002f9
 8000368:	080002f9 	.word	0x080002f9
 800036c:	080002f9 	.word	0x080002f9
 8000370:	080002f9 	.word	0x080002f9
 8000374:	080002f9 	.word	0x080002f9
 8000378:	080002f9 	.word	0x080002f9
 800037c:	080002f9 	.word	0x080002f9
 8000380:	080002f9 	.word	0x080002f9
 8000384:	080002f9 	.word	0x080002f9
 8000388:	080002f9 	.word	0x080002f9
 800038c:	080002f9 	.word	0x080002f9
 8000390:	08000421 	.word	0x08000421
 8000394:	080002f9 	.word	0x080002f9
 8000398:	080002f9 	.word	0x080002f9
 800039c:	080002f9 	.word	0x080002f9
 80003a0:	080002f9 	.word	0x080002f9
 80003a4:	080002f9 	.word	0x080002f9
 80003a8:	08000589 	.word	0x08000589
			{
			case '+':
			case '*':
			case '-':
			case '/':
				operation = input[indexz - 1];
 80003ac:	4b6c      	ldr	r3, [pc, #432]	; (8000560 <main+0x2d4>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	3b01      	subs	r3, #1
 80003b2:	4a6c      	ldr	r2, [pc, #432]	; (8000564 <main+0x2d8>)
 80003b4:	5cd2      	ldrb	r2, [r2, r3]
 80003b6:	4b6c      	ldr	r3, [pc, #432]	; (8000568 <main+0x2dc>)
 80003b8:	701a      	strb	r2, [r3, #0]
				for (i = indexz - 2, j = 0; i >= 0; i--, j++)
 80003ba:	4b69      	ldr	r3, [pc, #420]	; (8000560 <main+0x2d4>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	3b02      	subs	r3, #2
 80003c0:	4a6a      	ldr	r2, [pc, #424]	; (800056c <main+0x2e0>)
 80003c2:	6013      	str	r3, [r2, #0]
 80003c4:	4b6a      	ldr	r3, [pc, #424]	; (8000570 <main+0x2e4>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	e01f      	b.n	800040c <main+0x180>
				{
					firstOperand += ((input[i] - '0') * exponent(10, j));
 80003cc:	4b67      	ldr	r3, [pc, #412]	; (800056c <main+0x2e0>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a64      	ldr	r2, [pc, #400]	; (8000564 <main+0x2d8>)
 80003d2:	5cd3      	ldrb	r3, [r2, r3]
 80003d4:	3b30      	subs	r3, #48	; 0x30
 80003d6:	461c      	mov	r4, r3
 80003d8:	4b65      	ldr	r3, [pc, #404]	; (8000570 <main+0x2e4>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	4619      	mov	r1, r3
 80003e0:	200a      	movs	r0, #10
 80003e2:	f7ff ff37 	bl	8000254 <exponent>
 80003e6:	4603      	mov	r3, r0
 80003e8:	fb03 f304 	mul.w	r3, r3, r4
 80003ec:	4a61      	ldr	r2, [pc, #388]	; (8000574 <main+0x2e8>)
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4413      	add	r3, r2
 80003f2:	461a      	mov	r2, r3
 80003f4:	4b5f      	ldr	r3, [pc, #380]	; (8000574 <main+0x2e8>)
 80003f6:	601a      	str	r2, [r3, #0]
				for (i = indexz - 2, j = 0; i >= 0; i--, j++)
 80003f8:	4b5c      	ldr	r3, [pc, #368]	; (800056c <main+0x2e0>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	4a5b      	ldr	r2, [pc, #364]	; (800056c <main+0x2e0>)
 8000400:	6013      	str	r3, [r2, #0]
 8000402:	4b5b      	ldr	r3, [pc, #364]	; (8000570 <main+0x2e4>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	3301      	adds	r3, #1
 8000408:	4a59      	ldr	r2, [pc, #356]	; (8000570 <main+0x2e4>)
 800040a:	6013      	str	r3, [r2, #0]
 800040c:	4b57      	ldr	r3, [pc, #348]	; (800056c <main+0x2e0>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	dadb      	bge.n	80003cc <main+0x140>
				}
				entryToSecond = indexz;
 8000414:	4b52      	ldr	r3, [pc, #328]	; (8000560 <main+0x2d4>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	461a      	mov	r2, r3
 800041a:	4b57      	ldr	r3, [pc, #348]	; (8000578 <main+0x2ec>)
 800041c:	601a      	str	r2, [r3, #0]
				break;
 800041e:	e0bf      	b.n	80005a0 <main+0x314>
			case '=':
				for (i = indexz - 2, j = 0; i >= entryToSecond; i--, j++)
 8000420:	4b4f      	ldr	r3, [pc, #316]	; (8000560 <main+0x2d4>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	3b02      	subs	r3, #2
 8000426:	4a51      	ldr	r2, [pc, #324]	; (800056c <main+0x2e0>)
 8000428:	6013      	str	r3, [r2, #0]
 800042a:	4b51      	ldr	r3, [pc, #324]	; (8000570 <main+0x2e4>)
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	e01f      	b.n	8000472 <main+0x1e6>
				{
					secondOperand += ((input[i] - '0') * exponent(10, j));
 8000432:	4b4e      	ldr	r3, [pc, #312]	; (800056c <main+0x2e0>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a4b      	ldr	r2, [pc, #300]	; (8000564 <main+0x2d8>)
 8000438:	5cd3      	ldrb	r3, [r2, r3]
 800043a:	3b30      	subs	r3, #48	; 0x30
 800043c:	461c      	mov	r4, r3
 800043e:	4b4c      	ldr	r3, [pc, #304]	; (8000570 <main+0x2e4>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4619      	mov	r1, r3
 8000446:	200a      	movs	r0, #10
 8000448:	f7ff ff04 	bl	8000254 <exponent>
 800044c:	4603      	mov	r3, r0
 800044e:	fb03 f304 	mul.w	r3, r3, r4
 8000452:	4a4a      	ldr	r2, [pc, #296]	; (800057c <main+0x2f0>)
 8000454:	6812      	ldr	r2, [r2, #0]
 8000456:	4413      	add	r3, r2
 8000458:	461a      	mov	r2, r3
 800045a:	4b48      	ldr	r3, [pc, #288]	; (800057c <main+0x2f0>)
 800045c:	601a      	str	r2, [r3, #0]
				for (i = indexz - 2, j = 0; i >= entryToSecond; i--, j++)
 800045e:	4b43      	ldr	r3, [pc, #268]	; (800056c <main+0x2e0>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	3b01      	subs	r3, #1
 8000464:	4a41      	ldr	r2, [pc, #260]	; (800056c <main+0x2e0>)
 8000466:	6013      	str	r3, [r2, #0]
 8000468:	4b41      	ldr	r3, [pc, #260]	; (8000570 <main+0x2e4>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	3301      	adds	r3, #1
 800046e:	4a40      	ldr	r2, [pc, #256]	; (8000570 <main+0x2e4>)
 8000470:	6013      	str	r3, [r2, #0]
 8000472:	4b3e      	ldr	r3, [pc, #248]	; (800056c <main+0x2e0>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b40      	ldr	r3, [pc, #256]	; (8000578 <main+0x2ec>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	429a      	cmp	r2, r3
 800047c:	dad9      	bge.n	8000432 <main+0x1a6>
				}
				LCD_ES_tGoTo(1, 0);
 800047e:	2100      	movs	r1, #0
 8000480:	2001      	movs	r0, #1
 8000482:	f000 fd37 	bl	8000ef4 <LCD_ES_tGoTo>
				switch (operation)
 8000486:	4b38      	ldr	r3, [pc, #224]	; (8000568 <main+0x2dc>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	3b2a      	subs	r3, #42	; 0x2a
 800048c:	2b05      	cmp	r3, #5
 800048e:	d854      	bhi.n	800053a <main+0x2ae>
 8000490:	a201      	add	r2, pc, #4	; (adr r2, 8000498 <main+0x20c>)
 8000492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000496:	bf00      	nop
 8000498:	080004e1 	.word	0x080004e1
 800049c:	080004b1 	.word	0x080004b1
 80004a0:	0800053b 	.word	0x0800053b
 80004a4:	080004c9 	.word	0x080004c9
 80004a8:	0800053b 	.word	0x0800053b
 80004ac:	080004fb 	.word	0x080004fb
				{
				case '+':
					Lcd_ES_tdisplayNum(firstOperand + secondOperand);
 80004b0:	4b30      	ldr	r3, [pc, #192]	; (8000574 <main+0x2e8>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	b29a      	uxth	r2, r3
 80004b6:	4b31      	ldr	r3, [pc, #196]	; (800057c <main+0x2f0>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	4413      	add	r3, r2
 80004be:	b29b      	uxth	r3, r3
 80004c0:	4618      	mov	r0, r3
 80004c2:	f000 fcc1 	bl	8000e48 <Lcd_ES_tdisplayNum>
					break;
 80004c6:	e038      	b.n	800053a <main+0x2ae>
				case '-':
					Lcd_ES_tdisplayNum(firstOperand - secondOperand);
 80004c8:	4b2a      	ldr	r3, [pc, #168]	; (8000574 <main+0x2e8>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	4b2b      	ldr	r3, [pc, #172]	; (800057c <main+0x2f0>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	b29b      	uxth	r3, r3
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 fcb5 	bl	8000e48 <Lcd_ES_tdisplayNum>
					break;
 80004de:	e02c      	b.n	800053a <main+0x2ae>
				case '*':
					Lcd_ES_tdisplayNum(firstOperand * secondOperand);
 80004e0:	4b24      	ldr	r3, [pc, #144]	; (8000574 <main+0x2e8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	4a25      	ldr	r2, [pc, #148]	; (800057c <main+0x2f0>)
 80004e8:	6812      	ldr	r2, [r2, #0]
 80004ea:	b292      	uxth	r2, r2
 80004ec:	fb02 f303 	mul.w	r3, r2, r3
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 fca8 	bl	8000e48 <Lcd_ES_tdisplayNum>
					break;
 80004f8:	e01f      	b.n	800053a <main+0x2ae>
				case '/':
					if(secondOperand == 0){
 80004fa:	4b20      	ldr	r3, [pc, #128]	; (800057c <main+0x2f0>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d110      	bne.n	8000524 <main+0x298>
						lcd_ES_tclear();
 8000502:	f000 fb19 	bl	8000b38 <lcd_ES_tclear>
						LCD_ES_tGoTo(0, 0);
 8000506:	2100      	movs	r1, #0
 8000508:	2000      	movs	r0, #0
 800050a:	f000 fcf3 	bl	8000ef4 <LCD_ES_tGoTo>
						Lcd_ES_tsendString("ERROR: ");
 800050e:	481c      	ldr	r0, [pc, #112]	; (8000580 <main+0x2f4>)
 8000510:	f000 fc72 	bl	8000df8 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(1, 0);
 8000514:	2100      	movs	r1, #0
 8000516:	2001      	movs	r0, #1
 8000518:	f000 fcec 	bl	8000ef4 <LCD_ES_tGoTo>
						Lcd_ES_tsendString("Division by zero");
 800051c:	4819      	ldr	r0, [pc, #100]	; (8000584 <main+0x2f8>)
 800051e:	f000 fc6b 	bl	8000df8 <Lcd_ES_tsendString>
					}else{
						Lcd_ES_tdisplayNum(firstOperand / secondOperand);
					}
					break;
 8000522:	e009      	b.n	8000538 <main+0x2ac>
						Lcd_ES_tdisplayNum(firstOperand / secondOperand);
 8000524:	4b13      	ldr	r3, [pc, #76]	; (8000574 <main+0x2e8>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <main+0x2f0>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000530:	b29b      	uxth	r3, r3
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fc88 	bl	8000e48 <Lcd_ES_tdisplayNum>
					break;
 8000538:	bf00      	nop
				}

				// Reset variables
				firstOperand = 0;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <main+0x2e8>)
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
				secondOperand = 0;
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <main+0x2f0>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
				indexz = 0;
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <main+0x2d4>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]

				break;
 800054c:	e028      	b.n	80005a0 <main+0x314>
 800054e:	bf00      	nop
 8000550:	08000fa8 	.word	0x08000fa8
 8000554:	20000000 	.word	0x20000000
 8000558:	40010c00 	.word	0x40010c00
 800055c:	08000fb4 	.word	0x08000fb4
 8000560:	2000005e 	.word	0x2000005e
 8000564:	20000040 	.word	0x20000040
 8000568:	2000003c 	.word	0x2000003c
 800056c:	20000028 	.word	0x20000028
 8000570:	2000002c 	.word	0x2000002c
 8000574:	20000030 	.word	0x20000030
 8000578:	20000038 	.word	0x20000038
 800057c:	20000034 	.word	0x20000034
 8000580:	08000fc8 	.word	0x08000fc8
 8000584:	08000fd0 	.word	0x08000fd0
				case 'C':
					lcd_ES_tclear();
 8000588:	f000 fad6 	bl	8000b38 <lcd_ES_tclear>
					firstOperand = 0;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <main+0x318>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
					secondOperand = 0;
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <main+0x31c>)
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
					indexz = 0;
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <main+0x320>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
					break;
 800059e:	bf00      	nop
		KPD_ES_tGetKeyPressed(&Value);
 80005a0:	e6aa      	b.n	80002f8 <main+0x6c>
 80005a2:	bf00      	nop
 80005a4:	20000030 	.word	0x20000030
 80005a8:	20000034 	.word	0x20000034
 80005ac:	2000005e 	.word	0x2000005e

080005b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	; (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	; (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005de:	f000 fcb3 	bl	8000f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff fe53 	bl	800028c <main>

080005e6 <LoopForever>:

LoopForever:
    b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   r0, =_estack
 80005e8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005f4:	08001004 	.word	0x08001004
  ldr r2, =_sbss
 80005f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005fc:	20000060 	.word	0x20000060

08000600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC1_2_IRQHandler>

08000602 <Get_CRLH_Position>:
#include "Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000602:	b480      	push	{r7}
 8000604:	b083      	sub	sp, #12
 8000606:	af00      	add	r7, sp, #0
 8000608:	4603      	mov	r3, r0
 800060a:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800060c:	88fb      	ldrh	r3, [r7, #6]
 800060e:	2b80      	cmp	r3, #128	; 0x80
 8000610:	d042      	beq.n	8000698 <Get_CRLH_Position+0x96>
 8000612:	2b80      	cmp	r3, #128	; 0x80
 8000614:	dc11      	bgt.n	800063a <Get_CRLH_Position+0x38>
 8000616:	2b08      	cmp	r3, #8
 8000618:	d036      	beq.n	8000688 <Get_CRLH_Position+0x86>
 800061a:	2b08      	cmp	r3, #8
 800061c:	dc06      	bgt.n	800062c <Get_CRLH_Position+0x2a>
 800061e:	2b02      	cmp	r3, #2
 8000620:	d02e      	beq.n	8000680 <Get_CRLH_Position+0x7e>
 8000622:	2b04      	cmp	r3, #4
 8000624:	d02e      	beq.n	8000684 <Get_CRLH_Position+0x82>
 8000626:	2b01      	cmp	r3, #1
 8000628:	d028      	beq.n	800067c <Get_CRLH_Position+0x7a>
 800062a:	e047      	b.n	80006bc <Get_CRLH_Position+0xba>
 800062c:	2b20      	cmp	r3, #32
 800062e:	d02f      	beq.n	8000690 <Get_CRLH_Position+0x8e>
 8000630:	2b40      	cmp	r3, #64	; 0x40
 8000632:	d02f      	beq.n	8000694 <Get_CRLH_Position+0x92>
 8000634:	2b10      	cmp	r3, #16
 8000636:	d029      	beq.n	800068c <Get_CRLH_Position+0x8a>
 8000638:	e040      	b.n	80006bc <Get_CRLH_Position+0xba>
 800063a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800063e:	d033      	beq.n	80006a8 <Get_CRLH_Position+0xa6>
 8000640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000644:	dc09      	bgt.n	800065a <Get_CRLH_Position+0x58>
 8000646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800064a:	d029      	beq.n	80006a0 <Get_CRLH_Position+0x9e>
 800064c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000650:	d028      	beq.n	80006a4 <Get_CRLH_Position+0xa2>
 8000652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000656:	d021      	beq.n	800069c <Get_CRLH_Position+0x9a>
 8000658:	e030      	b.n	80006bc <Get_CRLH_Position+0xba>
 800065a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800065e:	d027      	beq.n	80006b0 <Get_CRLH_Position+0xae>
 8000660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000664:	dc03      	bgt.n	800066e <Get_CRLH_Position+0x6c>
 8000666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800066a:	d01f      	beq.n	80006ac <Get_CRLH_Position+0xaa>
 800066c:	e026      	b.n	80006bc <Get_CRLH_Position+0xba>
 800066e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000672:	d01f      	beq.n	80006b4 <Get_CRLH_Position+0xb2>
 8000674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000678:	d01e      	beq.n	80006b8 <Get_CRLH_Position+0xb6>
 800067a:	e01f      	b.n	80006bc <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 800067c:	2300      	movs	r3, #0
 800067e:	e01e      	b.n	80006be <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000680:	2304      	movs	r3, #4
 8000682:	e01c      	b.n	80006be <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000684:	2308      	movs	r3, #8
 8000686:	e01a      	b.n	80006be <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000688:	230c      	movs	r3, #12
 800068a:	e018      	b.n	80006be <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 800068c:	2310      	movs	r3, #16
 800068e:	e016      	b.n	80006be <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000690:	2314      	movs	r3, #20
 8000692:	e014      	b.n	80006be <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000694:	2318      	movs	r3, #24
 8000696:	e012      	b.n	80006be <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000698:	231c      	movs	r3, #28
 800069a:	e010      	b.n	80006be <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 800069c:	2300      	movs	r3, #0
 800069e:	e00e      	b.n	80006be <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	e00c      	b.n	80006be <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	e00a      	b.n	80006be <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 80006a8:	230c      	movs	r3, #12
 80006aa:	e008      	b.n	80006be <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 80006ac:	2310      	movs	r3, #16
 80006ae:	e006      	b.n	80006be <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 80006b0:	2314      	movs	r3, #20
 80006b2:	e004      	b.n	80006be <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 80006b4:	2318      	movs	r3, #24
 80006b6:	e002      	b.n	80006be <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 80006b8:	231c      	movs	r3, #28
 80006ba:	e000      	b.n	80006be <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	2bff      	cmp	r3, #255	; 0xff
 80006e0:	d801      	bhi.n	80006e6 <MCAL_GPIO_Init+0x1e>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	e001      	b.n	80006ea <MCAL_GPIO_Init+0x22>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3304      	adds	r3, #4
 80006ea:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff86 	bl	8000602 <Get_CRLH_Position>
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	230f      	movs	r3, #15
 80006fc:	4093      	lsls	r3, r2
 80006fe:	43da      	mvns	r2, r3
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	401a      	ands	r2, r3
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	789b      	ldrb	r3, [r3, #2]
 800070e:	2b07      	cmp	r3, #7
 8000710:	d00b      	beq.n	800072a <MCAL_GPIO_Init+0x62>
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	789b      	ldrb	r3, [r3, #2]
 8000716:	2b06      	cmp	r3, #6
 8000718:	d007      	beq.n	800072a <MCAL_GPIO_Init+0x62>
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	789b      	ldrb	r3, [r3, #2]
 800071e:	2b05      	cmp	r3, #5
 8000720:	d003      	beq.n	800072a <MCAL_GPIO_Init+0x62>
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	2b04      	cmp	r3, #4
 8000728:	d10e      	bne.n	8000748 <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	789b      	ldrb	r3, [r3, #2]
 800072e:	3b04      	subs	r3, #4
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	b25a      	sxtb	r2, r3
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	78db      	ldrb	r3, [r3, #3]
 8000738:	b25b      	sxtb	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	b25b      	sxtb	r3, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f003 030f 	and.w	r3, r3, #15
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	e02c      	b.n	80007a2 <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	789b      	ldrb	r3, [r3, #2]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d003      	beq.n	8000758 <MCAL_GPIO_Init+0x90>
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	789b      	ldrb	r3, [r3, #2]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d107      	bne.n	8000768 <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	789b      	ldrb	r3, [r3, #2]
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	b2db      	uxtb	r3, r3
 8000760:	f003 030f 	and.w	r3, r3, #15
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e01c      	b.n	80007a2 <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	789b      	ldrb	r3, [r3, #2]
 800076c:	2b08      	cmp	r3, #8
 800076e:	d102      	bne.n	8000776 <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 8000770:	2304      	movs	r3, #4
 8000772:	73fb      	strb	r3, [r7, #15]
 8000774:	e015      	b.n	80007a2 <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 8000776:	2308      	movs	r3, #8
 8000778:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	789b      	ldrb	r3, [r3, #2]
 800077e:	2b02      	cmp	r3, #2
 8000780:	d107      	bne.n	8000792 <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	8812      	ldrh	r2, [r2, #0]
 800078a:	431a      	orrs	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	e007      	b.n	80007a2 <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	8812      	ldrh	r2, [r2, #0]
 800079a:	43d2      	mvns	r2, r2
 800079c:	401a      	ands	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80007a2:	7bfc      	ldrb	r4, [r7, #15]
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff2a 	bl	8000602 <Get_CRLH_Position>
 80007ae:	4603      	mov	r3, r0
 80007b0:	fa04 f203 	lsl.w	r2, r4, r3
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	431a      	orrs	r2, r3
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	601a      	str	r2, [r3, #0]


}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd90      	pop	{r4, r7, pc}

080007c6 <MCAL_GPIO_ReadPin>:
 * Note					- None
 */


uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 80007c6:	b480      	push	{r7}
 80007c8:	b085      	sub	sp, #20
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	460b      	mov	r3, r1
 80007d0:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_LOW)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	689a      	ldr	r2, [r3, #8]
 80007d6:	887b      	ldrh	r3, [r7, #2]
 80007d8:	4013      	ands	r3, r2
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_HIGH;
 80007de:	2301      	movs	r3, #1
 80007e0:	73fb      	strb	r3, [r7, #15]
 80007e2:	e001      	b.n	80007e8 <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitStatus = GPIO_PIN_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3714      	adds	r7, #20
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <MCAL_GPIO_WritePin>:
 * Note					- None
 */


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	807b      	strh	r3, [r7, #2]
 8000800:	4613      	mov	r3, r2
 8000802:	707b      	strb	r3, [r7, #1]
	if(Value != (uint32_t)GPIO_PIN_LOW)
 8000804:	787b      	ldrb	r3, [r7, #1]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d003      	beq.n	8000812 <MCAL_GPIO_WritePin+0x1e>
		// Using BSRR (Port bit set/reset register) {doesnt't need |= sth)
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 800080a:	887a      	ldrh	r2, [r7, #2]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8000810:	e002      	b.n	8000818 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000812:	887a      	ldrh	r2, [r7, #2]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	615a      	str	r2, [r3, #20]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <MCAL_GPIO_WritePort>:
 * Note					- None
 */


void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t Value)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	460b      	mov	r3, r1
 800082c:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 800082e:	887a      	ldrh	r2, [r7, #2]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	60da      	str	r2, [r3, #12]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
	...

08000840 <KPD_init>:




ES_t KPD_init()
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0


	// Rows

	// R1 output push pull mode
	PinCfg.GPIO_PinNumber = KPD_U8_R1;
 8000846:	2310      	movs	r3, #16
 8000848:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 800084a:	2304      	movs	r3, #4
 800084c:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ;
 800084e:	2302      	movs	r3, #2
 8000850:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KPD_U8_PORTROWS, &PinCfg);
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	4830      	ldr	r0, [pc, #192]	; (8000918 <KPD_init+0xd8>)
 8000858:	f7ff ff36 	bl	80006c8 <MCAL_GPIO_Init>

	// R2 output push pull mode
	PinCfg.GPIO_PinNumber = KPD_U8_R2;
 800085c:	2320      	movs	r3, #32
 800085e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000860:	2304      	movs	r3, #4
 8000862:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ;
 8000864:	2302      	movs	r3, #2
 8000866:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KPD_U8_PORTROWS, &PinCfg);
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	482a      	ldr	r0, [pc, #168]	; (8000918 <KPD_init+0xd8>)
 800086e:	f7ff ff2b 	bl	80006c8 <MCAL_GPIO_Init>

	// R3 output push pull mode
	PinCfg.GPIO_PinNumber = KPD_U8_R3;
 8000872:	2340      	movs	r3, #64	; 0x40
 8000874:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000876:	2304      	movs	r3, #4
 8000878:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ;
 800087a:	2302      	movs	r3, #2
 800087c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KPD_U8_PORTROWS, &PinCfg);
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4619      	mov	r1, r3
 8000882:	4825      	ldr	r0, [pc, #148]	; (8000918 <KPD_init+0xd8>)
 8000884:	f7ff ff20 	bl	80006c8 <MCAL_GPIO_Init>

	// R4 output push pull mode
	PinCfg.GPIO_PinNumber = KPD_U8_R4;
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 800088c:	2304      	movs	r3, #4
 800088e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ;
 8000890:	2302      	movs	r3, #2
 8000892:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KPD_U8_PORTROWS, &PinCfg);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	481f      	ldr	r0, [pc, #124]	; (8000918 <KPD_init+0xd8>)
 800089a:	f7ff ff15 	bl	80006c8 <MCAL_GPIO_Init>


	// Columns

	// C1 input pull down mode
	PinCfg.GPIO_PinNumber = KPD_U8_C1;
 800089e:	2301      	movs	r3, #1
 80008a0:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_PULLDOWN;
 80008a2:	2303      	movs	r3, #3
 80008a4:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KPD_U8_PORTCOLS, &PinCfg);
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	4619      	mov	r1, r3
 80008aa:	481c      	ldr	r0, [pc, #112]	; (800091c <KPD_init+0xdc>)
 80008ac:	f7ff ff0c 	bl	80006c8 <MCAL_GPIO_Init>

	// C2 input pull down mode
	PinCfg.GPIO_PinNumber = KPD_U8_C2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_PULLDOWN;
 80008b4:	2303      	movs	r3, #3
 80008b6:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KPD_U8_PORTCOLS, &PinCfg);
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4817      	ldr	r0, [pc, #92]	; (800091c <KPD_init+0xdc>)
 80008be:	f7ff ff03 	bl	80006c8 <MCAL_GPIO_Init>

	// C3 input pull down mode
	PinCfg.GPIO_PinNumber = KPD_U8_C3;
 80008c2:	2304      	movs	r3, #4
 80008c4:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_PULLDOWN;
 80008c6:	2303      	movs	r3, #3
 80008c8:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KPD_U8_PORTCOLS, &PinCfg);
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	4619      	mov	r1, r3
 80008ce:	4813      	ldr	r0, [pc, #76]	; (800091c <KPD_init+0xdc>)
 80008d0:	f7ff fefa 	bl	80006c8 <MCAL_GPIO_Init>

	// C4 input pull down mode
	PinCfg.GPIO_PinNumber = KPD_U8_C4;
 80008d4:	2308      	movs	r3, #8
 80008d6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_PULLDOWN;
 80008d8:	2303      	movs	r3, #3
 80008da:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KPD_U8_PORTCOLS, &PinCfg);
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	4619      	mov	r1, r3
 80008e0:	480e      	ldr	r0, [pc, #56]	; (800091c <KPD_init+0xdc>)
 80008e2:	f7ff fef1 	bl	80006c8 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(KPD_U8_PORTROWS, KPD_U8_R1, GPIO_PIN_LOW);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2110      	movs	r1, #16
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <KPD_init+0xd8>)
 80008ec:	f7ff ff82 	bl	80007f4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KPD_U8_PORTROWS, KPD_U8_R2, GPIO_PIN_LOW);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2120      	movs	r1, #32
 80008f4:	4808      	ldr	r0, [pc, #32]	; (8000918 <KPD_init+0xd8>)
 80008f6:	f7ff ff7d 	bl	80007f4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KPD_U8_PORTROWS, KPD_U8_R3, GPIO_PIN_LOW);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2140      	movs	r1, #64	; 0x40
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <KPD_init+0xd8>)
 8000900:	f7ff ff78 	bl	80007f4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KPD_U8_PORTROWS, KPD_U8_R4, GPIO_PIN_LOW);
 8000904:	2200      	movs	r2, #0
 8000906:	2180      	movs	r1, #128	; 0x80
 8000908:	4803      	ldr	r0, [pc, #12]	; (8000918 <KPD_init+0xd8>)
 800090a:	f7ff ff73 	bl	80007f4 <MCAL_GPIO_WritePin>



	return ES_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40010c00 	.word	0x40010c00
 800091c:	40010800 	.word	0x40010800

08000920 <KPD_ES_tGetKeyPressed>:


// -------------------------------------------------------------------------------------------- //

ES_t KPD_ES_tGetKeyPressed(uint8_t *copy_pu8ReturnedKey)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	22ff      	movs	r2, #255	; 0xff
 800092c:	701a      	strb	r2, [r3, #0]
	uint8_t Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = GPIO_PIN_HIGH;
 800092e:	2301      	movs	r3, #1
 8000930:	733b      	strb	r3, [r7, #12]
	if(copy_pu8ReturnedKey != NULL)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d05b      	beq.n	80009f0 <KPD_ES_tGetKeyPressed+0xd0>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
 8000938:	2300      	movs	r3, #0
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	e054      	b.n	80009e8 <KPD_ES_tGetKeyPressed+0xc8>
		{
			// Activate row
			MCAL_GPIO_WritePin(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],GPIO_PIN_HIGH);
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	4a2f      	ldr	r2, [pc, #188]	; (8000a00 <KPD_ES_tGetKeyPressed+0xe0>)
 8000942:	5cd3      	ldrb	r3, [r2, r3]
 8000944:	b29b      	uxth	r3, r3
 8000946:	2201      	movs	r2, #1
 8000948:	4619      	mov	r1, r3
 800094a:	482e      	ldr	r0, [pc, #184]	; (8000a04 <KPD_ES_tGetKeyPressed+0xe4>)
 800094c:	f7ff ff52 	bl	80007f4 <MCAL_GPIO_WritePin>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
 8000950:	2300      	movs	r3, #0
 8000952:	73bb      	strb	r3, [r7, #14]
 8000954:	e036      	b.n	80009c4 <KPD_ES_tGetKeyPressed+0xa4>
			{
				Local_u8PinVal = MCAL_GPIO_ReadPin(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter]);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	4a2b      	ldr	r2, [pc, #172]	; (8000a08 <KPD_ES_tGetKeyPressed+0xe8>)
 800095a:	5cd3      	ldrb	r3, [r2, r3]
 800095c:	b29b      	uxth	r3, r3
 800095e:	4619      	mov	r1, r3
 8000960:	482a      	ldr	r0, [pc, #168]	; (8000a0c <KPD_ES_tGetKeyPressed+0xec>)
 8000962:	f7ff ff30 	bl	80007c6 <MCAL_GPIO_ReadPin>
 8000966:	4603      	mov	r3, r0
 8000968:	737b      	strb	r3, [r7, #13]
				if(Local_u8PinVal == GPIO_PIN_HIGH){ /* Switch is pressed */
 800096a:	7b7b      	ldrb	r3, [r7, #13]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d126      	bne.n	80009be <KPD_ES_tGetKeyPressed+0x9e>
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					wait_ms(20);   // Debouncing
 8000970:	2014      	movs	r0, #20
 8000972:	f000 f8c5 	bl	8000b00 <wait_ms>
					// Check if the pin is still low "problem of multiple display"
					Local_u8PinVal = MCAL_GPIO_ReadPin(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter]);  // Update the PinVal
 8000976:	7bbb      	ldrb	r3, [r7, #14]
 8000978:	4a23      	ldr	r2, [pc, #140]	; (8000a08 <KPD_ES_tGetKeyPressed+0xe8>)
 800097a:	5cd3      	ldrb	r3, [r2, r3]
 800097c:	b29b      	uxth	r3, r3
 800097e:	4619      	mov	r1, r3
 8000980:	4822      	ldr	r0, [pc, #136]	; (8000a0c <KPD_ES_tGetKeyPressed+0xec>)
 8000982:	f7ff ff20 	bl	80007c6 <MCAL_GPIO_ReadPin>
 8000986:	4603      	mov	r3, r0
 8000988:	737b      	strb	r3, [r7, #13]
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == GPIO_PIN_HIGH){
 800098a:	e009      	b.n	80009a0 <KPD_ES_tGetKeyPressed+0x80>
						// Continues reading until the value equals high
						Local_u8PinVal = MCAL_GPIO_ReadPin(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter]);   // Update the PinVal
 800098c:	7bbb      	ldrb	r3, [r7, #14]
 800098e:	4a1e      	ldr	r2, [pc, #120]	; (8000a08 <KPD_ES_tGetKeyPressed+0xe8>)
 8000990:	5cd3      	ldrb	r3, [r2, r3]
 8000992:	b29b      	uxth	r3, r3
 8000994:	4619      	mov	r1, r3
 8000996:	481d      	ldr	r0, [pc, #116]	; (8000a0c <KPD_ES_tGetKeyPressed+0xec>)
 8000998:	f7ff ff15 	bl	80007c6 <MCAL_GPIO_ReadPin>
 800099c:	4603      	mov	r3, r0
 800099e:	737b      	strb	r3, [r7, #13]
					while(Local_u8PinVal == GPIO_PIN_HIGH){
 80009a0:	7b7b      	ldrb	r3, [r7, #13]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d0f2      	beq.n	800098c <KPD_ES_tGetKeyPressed+0x6c>
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
 80009a6:	7bfa      	ldrb	r2, [r7, #15]
 80009a8:	7bbb      	ldrb	r3, [r7, #14]
 80009aa:	4919      	ldr	r1, [pc, #100]	; (8000a10 <KPD_ES_tGetKeyPressed+0xf0>)
 80009ac:	0092      	lsls	r2, r2, #2
 80009ae:	440a      	add	r2, r1
 80009b0:	4413      	add	r3, r2
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	701a      	strb	r2, [r3, #0]
					Local_u8Flag = GPIO_PIN_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	733b      	strb	r3, [r7, #12]
					break;
 80009bc:	e005      	b.n	80009ca <KPD_ES_tGetKeyPressed+0xaa>
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
 80009be:	7bbb      	ldrb	r3, [r7, #14]
 80009c0:	3301      	adds	r3, #1
 80009c2:	73bb      	strb	r3, [r7, #14]
 80009c4:	7bbb      	ldrb	r3, [r7, #14]
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d9c5      	bls.n	8000956 <KPD_ES_tGetKeyPressed+0x36>
				}
			}
			// Deactivate ROW
			MCAL_GPIO_WritePin(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],GPIO_PIN_LOW);
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	4a0c      	ldr	r2, [pc, #48]	; (8000a00 <KPD_ES_tGetKeyPressed+0xe0>)
 80009ce:	5cd3      	ldrb	r3, [r2, r3]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	2200      	movs	r2, #0
 80009d4:	4619      	mov	r1, r3
 80009d6:	480b      	ldr	r0, [pc, #44]	; (8000a04 <KPD_ES_tGetKeyPressed+0xe4>)
 80009d8:	f7ff ff0c 	bl	80007f4 <MCAL_GPIO_WritePin>
			if(Local_u8Flag == GPIO_PIN_LOW)
 80009dc:	7b3b      	ldrb	r3, [r7, #12]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d008      	beq.n	80009f4 <KPD_ES_tGetKeyPressed+0xd4>
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	3301      	adds	r3, #1
 80009e6:	73fb      	strb	r3, [r7, #15]
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d9a7      	bls.n	800093e <KPD_ES_tGetKeyPressed+0x1e>
 80009ee:	e002      	b.n	80009f6 <KPD_ES_tGetKeyPressed+0xd6>
				break;
		}


	}else{
		return ES_NOT_OK;
 80009f0:	2301      	movs	r3, #1
 80009f2:	e001      	b.n	80009f8 <KPD_ES_tGetKeyPressed+0xd8>
				break;
 80009f4:	bf00      	nop
	}
	return ES_OK;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	08000ff4 	.word	0x08000ff4
 8000a04:	40010c00 	.word	0x40010c00
 8000a08:	08000ff8 	.word	0x08000ff8
 8000a0c:	40010800 	.word	0x40010800
 8000a10:	08000fe4 	.word	0x08000fe4

08000a14 <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(uint8_t row,uint8_t column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
//	MCAL_GPIO_WritePin(LCD_CMD_PORT, EN, GPIO_PIN_HIGH);
	MCAL_GPIO_WritePin(LCD_CMD_PORT, EN, GPIO_PIN_HIGH);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4808      	ldr	r0, [pc, #32]	; (8000a40 <LCD_ES_tTrigger_Enable+0x2c>)
 8000a1e:	f7ff fee9 	bl	80007f4 <MCAL_GPIO_WritePin>
//	_delay_us(10);
	wait_ms(1);
 8000a22:	2001      	movs	r0, #1
 8000a24:	f000 f86c 	bl	8000b00 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CMD_PORT, EN, GPIO_PIN_LOW);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2102      	movs	r1, #2
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <LCD_ES_tTrigger_Enable+0x2c>)
 8000a2e:	f7ff fee1 	bl	80007f4 <MCAL_GPIO_WritePin>
//	MCAL_GPIO_WritePin(LCD_CMD_PORT, EN, LOW);
//	_delay_us(2000);
	wait_ms(2);
 8000a32:	2002      	movs	r0, #2
 8000a34:	f000 f864 	bl	8000b00 <wait_ms>
	return ES_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40010c00 	.word	0x40010c00

08000a44 <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg;

	// Pins Configuration for LCD

	// RS output push pull mode
	PinCfg.GPIO_PinNumber = RS;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000a52:	2301      	movs	r3, #1
 8000a54:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CMD_PORT, &PinCfg);
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4827      	ldr	r0, [pc, #156]	; (8000af8 <Lcd_ES_tInit+0xb4>)
 8000a5c:	f7ff fe34 	bl	80006c8 <MCAL_GPIO_Init>

	// EN output push pull mode
	PinCfg.GPIO_PinNumber = EN;
 8000a60:	2302      	movs	r3, #2
 8000a62:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000a64:	2304      	movs	r3, #4
 8000a66:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CMD_PORT, &PinCfg);
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4821      	ldr	r0, [pc, #132]	; (8000af8 <Lcd_ES_tInit+0xb4>)
 8000a72:	f7ff fe29 	bl	80006c8 <MCAL_GPIO_Init>

	// D4 output push pull mode
	PinCfg.GPIO_PinNumber = D4;
 8000a76:	2310      	movs	r3, #16
 8000a78:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	481d      	ldr	r0, [pc, #116]	; (8000afc <Lcd_ES_tInit+0xb8>)
 8000a88:	f7ff fe1e 	bl	80006c8 <MCAL_GPIO_Init>

	// D5 output push pull mode
	PinCfg.GPIO_PinNumber = D5;
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000a90:	2304      	movs	r3, #4
 8000a92:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000a94:	2301      	movs	r3, #1
 8000a96:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4817      	ldr	r0, [pc, #92]	; (8000afc <Lcd_ES_tInit+0xb8>)
 8000a9e:	f7ff fe13 	bl	80006c8 <MCAL_GPIO_Init>

	// D6 output push pull mode
	PinCfg.GPIO_PinNumber = D6;
 8000aa2:	2340      	movs	r3, #64	; 0x40
 8000aa4:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4812      	ldr	r0, [pc, #72]	; (8000afc <Lcd_ES_tInit+0xb8>)
 8000ab4:	f7ff fe08 	bl	80006c8 <MCAL_GPIO_Init>

	// D7 output push pull mode
	PinCfg.GPIO_PinNumber = D7;
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000abc:	2304      	movs	r3, #4
 8000abe:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <Lcd_ES_tInit+0xb8>)
 8000aca:	f7ff fdfd 	bl	80006c8 <MCAL_GPIO_Init>



#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f000 f83e 	bl	8000b50 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
 8000ad4:	2028      	movs	r0, #40	; 0x28
 8000ad6:	f000 f83b 	bl	8000b50 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
 8000ada:	200e      	movs	r0, #14
 8000adc:	f000 f838 	bl	8000b50 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
 8000ae0:	2006      	movs	r0, #6
 8000ae2:	f000 f835 	bl	8000b50 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f000 f832 	bl	8000b50 <Lcd_ES_tsendCmd>
	return ES_OK;
 8000aec:	2300      	movs	r3, #0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40010c00 	.word	0x40010c00
 8000afc:	40010800 	.word	0x40010800

08000b00 <wait_ms>:
 *
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

void wait_ms(uint32_t time){
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<time;i++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	e00b      	b.n	8000b26 <wait_ms+0x26>
		for(j=0;j<255;j++);
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	e002      	b.n	8000b1a <wait_ms+0x1a>
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	3301      	adds	r3, #1
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2bfe      	cmp	r3, #254	; 0xfe
 8000b1e:	d9f9      	bls.n	8000b14 <wait_ms+0x14>
	for(i=0;i<time;i++)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	3301      	adds	r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d3ef      	bcc.n	8000b0e <wait_ms+0xe>
}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <lcd_ES_tclear>:

ES_t lcd_ES_tclear()
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	Lcd_ES_tsendCmd(CLR_Display);
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f000 f807 	bl	8000b50 <Lcd_ES_tsendCmd>
	wait_ms(2);
 8000b42:	2002      	movs	r0, #2
 8000b44:	f7ff ffdc 	bl	8000b00 <wait_ms>
	return ES_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(uint8_t cmd){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
//	MCAL_GPIO_WritePin(LCD_CMD_PORT, RS, LOW);
	MCAL_GPIO_WritePin(LCD_CMD_PORT, RS, GPIO_PIN_LOW);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	484f      	ldr	r0, [pc, #316]	; (8000c9c <Lcd_ES_tsendCmd+0x14c>)
 8000b60:	f7ff fe48 	bl	80007f4 <MCAL_GPIO_WritePin>
//	MCAL_GPIO_WritePin(LCD_CMD_PORT, RW, LOW);
	MCAL_GPIO_WritePin(LCD_CMD_PORT, RW, GPIO_PIN_LOW);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2104      	movs	r1, #4
 8000b68:	484c      	ldr	r0, [pc, #304]	; (8000c9c <Lcd_ES_tsendCmd+0x14c>)
 8000b6a:	f7ff fe43 	bl	80007f4 <MCAL_GPIO_WritePin>
	// DIO_ES_tGetPinValue, MCAL_GPIO_WritePin
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D7,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D7,GPIO_PIN_LOW);
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	09db      	lsrs	r3, r3, #7
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d005      	beq.n	8000b88 <Lcd_ES_tsendCmd+0x38>
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2180      	movs	r1, #128	; 0x80
 8000b80:	4847      	ldr	r0, [pc, #284]	; (8000ca0 <Lcd_ES_tsendCmd+0x150>)
 8000b82:	f7ff fe37 	bl	80007f4 <MCAL_GPIO_WritePin>
 8000b86:	e004      	b.n	8000b92 <Lcd_ES_tsendCmd+0x42>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	4844      	ldr	r0, [pc, #272]	; (8000ca0 <Lcd_ES_tsendCmd+0x150>)
 8000b8e:	f7ff fe31 	bl	80007f4 <MCAL_GPIO_WritePin>
	(GET_BIT(cmd,6)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D6,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D6,GPIO_PIN_LOW);
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	099b      	lsrs	r3, r3, #6
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d005      	beq.n	8000bac <Lcd_ES_tsendCmd+0x5c>
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2140      	movs	r1, #64	; 0x40
 8000ba4:	483e      	ldr	r0, [pc, #248]	; (8000ca0 <Lcd_ES_tsendCmd+0x150>)
 8000ba6:	f7ff fe25 	bl	80007f4 <MCAL_GPIO_WritePin>
 8000baa:	e004      	b.n	8000bb6 <Lcd_ES_tsendCmd+0x66>
 8000bac:	2200      	movs	r2, #0
 8000bae:	2140      	movs	r1, #64	; 0x40
 8000bb0:	483b      	ldr	r0, [pc, #236]	; (8000ca0 <Lcd_ES_tsendCmd+0x150>)
 8000bb2:	f7ff fe1f 	bl	80007f4 <MCAL_GPIO_WritePin>
	(GET_BIT(cmd,5)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D5,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D5,GPIO_PIN_LOW);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	095b      	lsrs	r3, r3, #5
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d005      	beq.n	8000bd0 <Lcd_ES_tsendCmd+0x80>
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4835      	ldr	r0, [pc, #212]	; (8000ca0 <Lcd_ES_tsendCmd+0x150>)
 8000bca:	f7ff fe13 	bl	80007f4 <MCAL_GPIO_WritePin>
 8000bce:	e004      	b.n	8000bda <Lcd_ES_tsendCmd+0x8a>
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2120      	movs	r1, #32
 8000bd4:	4832      	ldr	r0, [pc, #200]	; (8000ca0 <Lcd_ES_tsendCmd+0x150>)
 8000bd6:	f7ff fe0d 	bl	80007f4 <MCAL_GPIO_WritePin>
	(GET_BIT(cmd,4)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D4,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D4,GPIO_PIN_LOW);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	091b      	lsrs	r3, r3, #4
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d005      	beq.n	8000bf4 <Lcd_ES_tsendCmd+0xa4>
 8000be8:	2201      	movs	r2, #1
 8000bea:	2110      	movs	r1, #16
 8000bec:	482c      	ldr	r0, [pc, #176]	; (8000ca0 <Lcd_ES_tsendCmd+0x150>)
 8000bee:	f7ff fe01 	bl	80007f4 <MCAL_GPIO_WritePin>
 8000bf2:	e004      	b.n	8000bfe <Lcd_ES_tsendCmd+0xae>
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2110      	movs	r1, #16
 8000bf8:	4829      	ldr	r0, [pc, #164]	; (8000ca0 <Lcd_ES_tsendCmd+0x150>)
 8000bfa:	f7ff fdfb 	bl	80007f4 <MCAL_GPIO_WritePin>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
 8000bfe:	f7ff ff09 	bl	8000a14 <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D7,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D7,GPIO_PIN_LOW);
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	08db      	lsrs	r3, r3, #3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d005      	beq.n	8000c1c <Lcd_ES_tsendCmd+0xcc>
 8000c10:	2201      	movs	r2, #1
 8000c12:	2180      	movs	r1, #128	; 0x80
 8000c14:	4822      	ldr	r0, [pc, #136]	; (8000ca0 <Lcd_ES_tsendCmd+0x150>)
 8000c16:	f7ff fded 	bl	80007f4 <MCAL_GPIO_WritePin>
 8000c1a:	e004      	b.n	8000c26 <Lcd_ES_tsendCmd+0xd6>
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2180      	movs	r1, #128	; 0x80
 8000c20:	481f      	ldr	r0, [pc, #124]	; (8000ca0 <Lcd_ES_tsendCmd+0x150>)
 8000c22:	f7ff fde7 	bl	80007f4 <MCAL_GPIO_WritePin>
	(GET_BIT(cmd,2)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D6,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D6,GPIO_PIN_LOW);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	089b      	lsrs	r3, r3, #2
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d005      	beq.n	8000c40 <Lcd_ES_tsendCmd+0xf0>
 8000c34:	2201      	movs	r2, #1
 8000c36:	2140      	movs	r1, #64	; 0x40
 8000c38:	4819      	ldr	r0, [pc, #100]	; (8000ca0 <Lcd_ES_tsendCmd+0x150>)
 8000c3a:	f7ff fddb 	bl	80007f4 <MCAL_GPIO_WritePin>
 8000c3e:	e004      	b.n	8000c4a <Lcd_ES_tsendCmd+0xfa>
 8000c40:	2200      	movs	r2, #0
 8000c42:	2140      	movs	r1, #64	; 0x40
 8000c44:	4816      	ldr	r0, [pc, #88]	; (8000ca0 <Lcd_ES_tsendCmd+0x150>)
 8000c46:	f7ff fdd5 	bl	80007f4 <MCAL_GPIO_WritePin>
	(GET_BIT(cmd,1)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D5,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D5,GPIO_PIN_LOW);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	085b      	lsrs	r3, r3, #1
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d005      	beq.n	8000c64 <Lcd_ES_tsendCmd+0x114>
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2120      	movs	r1, #32
 8000c5c:	4810      	ldr	r0, [pc, #64]	; (8000ca0 <Lcd_ES_tsendCmd+0x150>)
 8000c5e:	f7ff fdc9 	bl	80007f4 <MCAL_GPIO_WritePin>
 8000c62:	e004      	b.n	8000c6e <Lcd_ES_tsendCmd+0x11e>
 8000c64:	2200      	movs	r2, #0
 8000c66:	2120      	movs	r1, #32
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <Lcd_ES_tsendCmd+0x150>)
 8000c6a:	f7ff fdc3 	bl	80007f4 <MCAL_GPIO_WritePin>
	(GET_BIT(cmd,0)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D4,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D4,GPIO_PIN_LOW);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d005      	beq.n	8000c84 <Lcd_ES_tsendCmd+0x134>
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <Lcd_ES_tsendCmd+0x150>)
 8000c7e:	f7ff fdb9 	bl	80007f4 <MCAL_GPIO_WritePin>
 8000c82:	e004      	b.n	8000c8e <Lcd_ES_tsendCmd+0x13e>
 8000c84:	2200      	movs	r2, #0
 8000c86:	2110      	movs	r1, #16
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <Lcd_ES_tsendCmd+0x150>)
 8000c8a:	f7ff fdb3 	bl	80007f4 <MCAL_GPIO_WritePin>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
 8000c8e:	f7ff fec1 	bl	8000a14 <LCD_ES_tTrigger_Enable>
	return ES_OK;
 8000c92:	2300      	movs	r3, #0
	(GET_BIT(cmd,0)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D0,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D0,GPIO_PIN_LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40010c00 	.word	0x40010c00
 8000ca0:	40010800 	.word	0x40010800

08000ca4 <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(uint8_t data){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
#if LCD_MODE == FOUR_BIT_MODE
	MCAL_GPIO_WritePin(LCD_CMD_PORT, RS, GPIO_PIN_HIGH);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	484f      	ldr	r0, [pc, #316]	; (8000df0 <Lcd_ES_tsendChar+0x14c>)
 8000cb4:	f7ff fd9e 	bl	80007f4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CMD_PORT, RW, GPIO_PIN_LOW);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2104      	movs	r1, #4
 8000cbc:	484c      	ldr	r0, [pc, #304]	; (8000df0 <Lcd_ES_tsendChar+0x14c>)
 8000cbe:	f7ff fd99 	bl	80007f4 <MCAL_GPIO_WritePin>
	(GET_BIT(data,7)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D7,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D7,GPIO_PIN_LOW);
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	09db      	lsrs	r3, r3, #7
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d005      	beq.n	8000cdc <Lcd_ES_tsendChar+0x38>
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	4847      	ldr	r0, [pc, #284]	; (8000df4 <Lcd_ES_tsendChar+0x150>)
 8000cd6:	f7ff fd8d 	bl	80007f4 <MCAL_GPIO_WritePin>
 8000cda:	e004      	b.n	8000ce6 <Lcd_ES_tsendChar+0x42>
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	4844      	ldr	r0, [pc, #272]	; (8000df4 <Lcd_ES_tsendChar+0x150>)
 8000ce2:	f7ff fd87 	bl	80007f4 <MCAL_GPIO_WritePin>
	(GET_BIT(data,6)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D6,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D6,GPIO_PIN_LOW);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	099b      	lsrs	r3, r3, #6
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d005      	beq.n	8000d00 <Lcd_ES_tsendChar+0x5c>
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2140      	movs	r1, #64	; 0x40
 8000cf8:	483e      	ldr	r0, [pc, #248]	; (8000df4 <Lcd_ES_tsendChar+0x150>)
 8000cfa:	f7ff fd7b 	bl	80007f4 <MCAL_GPIO_WritePin>
 8000cfe:	e004      	b.n	8000d0a <Lcd_ES_tsendChar+0x66>
 8000d00:	2200      	movs	r2, #0
 8000d02:	2140      	movs	r1, #64	; 0x40
 8000d04:	483b      	ldr	r0, [pc, #236]	; (8000df4 <Lcd_ES_tsendChar+0x150>)
 8000d06:	f7ff fd75 	bl	80007f4 <MCAL_GPIO_WritePin>
	(GET_BIT(data,5)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D5,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D5,GPIO_PIN_LOW);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	095b      	lsrs	r3, r3, #5
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d005      	beq.n	8000d24 <Lcd_ES_tsendChar+0x80>
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2120      	movs	r1, #32
 8000d1c:	4835      	ldr	r0, [pc, #212]	; (8000df4 <Lcd_ES_tsendChar+0x150>)
 8000d1e:	f7ff fd69 	bl	80007f4 <MCAL_GPIO_WritePin>
 8000d22:	e004      	b.n	8000d2e <Lcd_ES_tsendChar+0x8a>
 8000d24:	2200      	movs	r2, #0
 8000d26:	2120      	movs	r1, #32
 8000d28:	4832      	ldr	r0, [pc, #200]	; (8000df4 <Lcd_ES_tsendChar+0x150>)
 8000d2a:	f7ff fd63 	bl	80007f4 <MCAL_GPIO_WritePin>
	(GET_BIT(data,4)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D4,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D4,GPIO_PIN_LOW);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	091b      	lsrs	r3, r3, #4
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d005      	beq.n	8000d48 <Lcd_ES_tsendChar+0xa4>
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2110      	movs	r1, #16
 8000d40:	482c      	ldr	r0, [pc, #176]	; (8000df4 <Lcd_ES_tsendChar+0x150>)
 8000d42:	f7ff fd57 	bl	80007f4 <MCAL_GPIO_WritePin>
 8000d46:	e004      	b.n	8000d52 <Lcd_ES_tsendChar+0xae>
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	4829      	ldr	r0, [pc, #164]	; (8000df4 <Lcd_ES_tsendChar+0x150>)
 8000d4e:	f7ff fd51 	bl	80007f4 <MCAL_GPIO_WritePin>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
 8000d52:	f7ff fe5f 	bl	8000a14 <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D7,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D7,GPIO_PIN_LOW);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	08db      	lsrs	r3, r3, #3
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d005      	beq.n	8000d70 <Lcd_ES_tsendChar+0xcc>
 8000d64:	2201      	movs	r2, #1
 8000d66:	2180      	movs	r1, #128	; 0x80
 8000d68:	4822      	ldr	r0, [pc, #136]	; (8000df4 <Lcd_ES_tsendChar+0x150>)
 8000d6a:	f7ff fd43 	bl	80007f4 <MCAL_GPIO_WritePin>
 8000d6e:	e004      	b.n	8000d7a <Lcd_ES_tsendChar+0xd6>
 8000d70:	2200      	movs	r2, #0
 8000d72:	2180      	movs	r1, #128	; 0x80
 8000d74:	481f      	ldr	r0, [pc, #124]	; (8000df4 <Lcd_ES_tsendChar+0x150>)
 8000d76:	f7ff fd3d 	bl	80007f4 <MCAL_GPIO_WritePin>
	(GET_BIT(data,2)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D6,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D6,GPIO_PIN_LOW);
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	089b      	lsrs	r3, r3, #2
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d005      	beq.n	8000d94 <Lcd_ES_tsendChar+0xf0>
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2140      	movs	r1, #64	; 0x40
 8000d8c:	4819      	ldr	r0, [pc, #100]	; (8000df4 <Lcd_ES_tsendChar+0x150>)
 8000d8e:	f7ff fd31 	bl	80007f4 <MCAL_GPIO_WritePin>
 8000d92:	e004      	b.n	8000d9e <Lcd_ES_tsendChar+0xfa>
 8000d94:	2200      	movs	r2, #0
 8000d96:	2140      	movs	r1, #64	; 0x40
 8000d98:	4816      	ldr	r0, [pc, #88]	; (8000df4 <Lcd_ES_tsendChar+0x150>)
 8000d9a:	f7ff fd2b 	bl	80007f4 <MCAL_GPIO_WritePin>
	(GET_BIT(data,1)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D5,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D5,GPIO_PIN_LOW);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	085b      	lsrs	r3, r3, #1
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d005      	beq.n	8000db8 <Lcd_ES_tsendChar+0x114>
 8000dac:	2201      	movs	r2, #1
 8000dae:	2120      	movs	r1, #32
 8000db0:	4810      	ldr	r0, [pc, #64]	; (8000df4 <Lcd_ES_tsendChar+0x150>)
 8000db2:	f7ff fd1f 	bl	80007f4 <MCAL_GPIO_WritePin>
 8000db6:	e004      	b.n	8000dc2 <Lcd_ES_tsendChar+0x11e>
 8000db8:	2200      	movs	r2, #0
 8000dba:	2120      	movs	r1, #32
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <Lcd_ES_tsendChar+0x150>)
 8000dbe:	f7ff fd19 	bl	80007f4 <MCAL_GPIO_WritePin>
	(GET_BIT(data,0)) ? MCAL_GPIO_WritePin(LCD_DATA_PORT, D4,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_DATA_PORT, D4,GPIO_PIN_LOW);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d005      	beq.n	8000dd8 <Lcd_ES_tsendChar+0x134>
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2110      	movs	r1, #16
 8000dd0:	4808      	ldr	r0, [pc, #32]	; (8000df4 <Lcd_ES_tsendChar+0x150>)
 8000dd2:	f7ff fd0f 	bl	80007f4 <MCAL_GPIO_WritePin>
 8000dd6:	e004      	b.n	8000de2 <Lcd_ES_tsendChar+0x13e>
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2110      	movs	r1, #16
 8000ddc:	4805      	ldr	r0, [pc, #20]	; (8000df4 <Lcd_ES_tsendChar+0x150>)
 8000dde:	f7ff fd09 	bl	80007f4 <MCAL_GPIO_WritePin>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
 8000de2:	f7ff fe17 	bl	8000a14 <LCD_ES_tTrigger_Enable>
	return ES_OK;
 8000de6:	2300      	movs	r3, #0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40010c00 	.word	0x40010c00
 8000df4:	40010800 	.word	0x40010800

08000df8 <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	MCAL_GPIO_WritePin(LCD_CMD_PORT, RS, GPIO_PIN_HIGH);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2101      	movs	r1, #1
 8000e04:	480f      	ldr	r0, [pc, #60]	; (8000e44 <Lcd_ES_tsendString+0x4c>)
 8000e06:	f7ff fcf5 	bl	80007f4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CMD_PORT, RW, GPIO_PIN_LOW);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <Lcd_ES_tsendString+0x4c>)
 8000e10:	f7ff fcf0 	bl	80007f4 <MCAL_GPIO_WritePin>

	unsigned char i=0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]
	while(data[i]!=0)
 8000e18:	e009      	b.n	8000e2e <Lcd_ES_tsendString+0x36>
	{
		Lcd_ES_tsendChar(data[i]);
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff3e 	bl	8000ca4 <Lcd_ES_tsendChar>
		i++;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	73fb      	strb	r3, [r7, #15]
	while(data[i]!=0)
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	4413      	add	r3, r2
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1ef      	bne.n	8000e1a <Lcd_ES_tsendString+0x22>
	}
	return ES_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40010c00 	.word	0x40010c00

08000e48 <Lcd_ES_tdisplayNum>:
}


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(uint16_t num)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_WritePin(LCD_CMD_PORT, RS, GPIO_PIN_HIGH);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2101      	movs	r1, #1
 8000e56:	4825      	ldr	r0, [pc, #148]	; (8000eec <Lcd_ES_tdisplayNum+0xa4>)
 8000e58:	f7ff fccc 	bl	80007f4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CMD_PORT, RW, GPIO_PIN_LOW);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2104      	movs	r1, #4
 8000e60:	4822      	ldr	r0, [pc, #136]	; (8000eec <Lcd_ES_tdisplayNum+0xa4>)
 8000e62:	f7ff fcc7 	bl	80007f4 <MCAL_GPIO_WritePin>

	uint8_t ch[10],i=0,j=0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	75fb      	strb	r3, [r7, #23]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	75bb      	strb	r3, [r7, #22]
	if(num == 0)
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d120      	bne.n	8000eb6 <Lcd_ES_tdisplayNum+0x6e>
	{
		Lcd_ES_tsendChar('0');
 8000e74:	2030      	movs	r0, #48	; 0x30
 8000e76:	f7ff ff15 	bl	8000ca4 <Lcd_ES_tsendChar>
 8000e7a:	e032      	b.n	8000ee2 <Lcd_ES_tdisplayNum+0x9a>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
 8000e7c:	88fa      	ldrh	r2, [r7, #6]
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <Lcd_ES_tdisplayNum+0xa8>)
 8000e80:	fba3 1302 	umull	r1, r3, r3, r2
 8000e84:	08d9      	lsrs	r1, r3, #3
 8000e86:	460b      	mov	r3, r1
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	7dfb      	ldrb	r3, [r7, #23]
 8000e96:	3230      	adds	r2, #48	; 0x30
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	f107 0118 	add.w	r1, r7, #24
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f803 2c0c 	strb.w	r2, [r3, #-12]
			num /= 10;
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <Lcd_ES_tdisplayNum+0xa8>)
 8000ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eac:	08db      	lsrs	r3, r3, #3
 8000eae:	80fb      	strh	r3, [r7, #6]
			i++;
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	75fb      	strb	r3, [r7, #23]
		while(num)
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1df      	bne.n	8000e7c <Lcd_ES_tdisplayNum+0x34>
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
 8000ebe:	75bb      	strb	r3, [r7, #22]
 8000ec0:	e00c      	b.n	8000edc <Lcd_ES_tdisplayNum+0x94>
		{
			Lcd_ES_tsendChar(ch[j-1]);
 8000ec2:	7dbb      	ldrb	r3, [r7, #22]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	f107 0218 	add.w	r2, r7, #24
 8000eca:	4413      	add	r3, r2
 8000ecc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fee7 	bl	8000ca4 <Lcd_ES_tsendChar>
		for(j=i;j>0;j--)
 8000ed6:	7dbb      	ldrb	r3, [r7, #22]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	75bb      	strb	r3, [r7, #22]
 8000edc:	7dbb      	ldrb	r3, [r7, #22]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1ef      	bne.n	8000ec2 <Lcd_ES_tdisplayNum+0x7a>
		}
	}
	return ES_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40010c00 	.word	0x40010c00
 8000ef0:	cccccccd 	.word	0xcccccccd

08000ef4 <LCD_ES_tGoTo>:
	}
	return ES_OK;
}

/************************************************************************/
ES_t LCD_ES_tGoTo(uint8_t Line, uint8_t x){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
	if(0 == Line)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d109      	bne.n	8000f1e <LCD_ES_tGoTo+0x2a>
	{
		if ( x <=15)
 8000f0a:	79bb      	ldrb	r3, [r7, #6]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d815      	bhi.n	8000f3c <LCD_ES_tGoTo+0x48>
		{
			Lcd_ES_tsendCmd(0x80 + x);
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	3b80      	subs	r3, #128	; 0x80
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fe1a 	bl	8000b50 <Lcd_ES_tsendCmd>
 8000f1c:	e00e      	b.n	8000f3c <LCD_ES_tGoTo+0x48>
		}
	}
	else if (1 == Line)
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d109      	bne.n	8000f38 <LCD_ES_tGoTo+0x44>
	{
		if ( x <=15)
 8000f24:	79bb      	ldrb	r3, [r7, #6]
 8000f26:	2b0f      	cmp	r3, #15
 8000f28:	d808      	bhi.n	8000f3c <LCD_ES_tGoTo+0x48>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
 8000f2a:	79bb      	ldrb	r3, [r7, #6]
 8000f2c:	3b40      	subs	r3, #64	; 0x40
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fe0d 	bl	8000b50 <Lcd_ES_tsendCmd>
 8000f36:	e001      	b.n	8000f3c <LCD_ES_tGoTo+0x48>
		}
	}else{
		return ES_NOT_OK;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <LCD_ES_tGoTo+0x4a>
	}
	return ES_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <__libc_init_array>:
 8000f48:	b570      	push	{r4, r5, r6, lr}
 8000f4a:	2500      	movs	r5, #0
 8000f4c:	4e0c      	ldr	r6, [pc, #48]	; (8000f80 <__libc_init_array+0x38>)
 8000f4e:	4c0d      	ldr	r4, [pc, #52]	; (8000f84 <__libc_init_array+0x3c>)
 8000f50:	1ba4      	subs	r4, r4, r6
 8000f52:	10a4      	asrs	r4, r4, #2
 8000f54:	42a5      	cmp	r5, r4
 8000f56:	d109      	bne.n	8000f6c <__libc_init_array+0x24>
 8000f58:	f000 f81a 	bl	8000f90 <_init>
 8000f5c:	2500      	movs	r5, #0
 8000f5e:	4e0a      	ldr	r6, [pc, #40]	; (8000f88 <__libc_init_array+0x40>)
 8000f60:	4c0a      	ldr	r4, [pc, #40]	; (8000f8c <__libc_init_array+0x44>)
 8000f62:	1ba4      	subs	r4, r4, r6
 8000f64:	10a4      	asrs	r4, r4, #2
 8000f66:	42a5      	cmp	r5, r4
 8000f68:	d105      	bne.n	8000f76 <__libc_init_array+0x2e>
 8000f6a:	bd70      	pop	{r4, r5, r6, pc}
 8000f6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f70:	4798      	blx	r3
 8000f72:	3501      	adds	r5, #1
 8000f74:	e7ee      	b.n	8000f54 <__libc_init_array+0xc>
 8000f76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f7a:	4798      	blx	r3
 8000f7c:	3501      	adds	r5, #1
 8000f7e:	e7f2      	b.n	8000f66 <__libc_init_array+0x1e>
 8000f80:	08000ffc 	.word	0x08000ffc
 8000f84:	08000ffc 	.word	0x08000ffc
 8000f88:	08000ffc 	.word	0x08000ffc
 8000f8c:	08001000 	.word	0x08001000

08000f90 <_init>:
 8000f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f92:	bf00      	nop
 8000f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f96:	bc08      	pop	{r3}
 8000f98:	469e      	mov	lr, r3
 8000f9a:	4770      	bx	lr

08000f9c <_fini>:
 8000f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9e:	bf00      	nop
 8000fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fa2:	bc08      	pop	{r3}
 8000fa4:	469e      	mov	lr, r3
 8000fa6:	4770      	bx	lr
