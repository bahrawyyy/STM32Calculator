
Atmega32_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  00002f32  00002fc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00800110  00800110  00003076  2**0
                  ALLOC
  3 .stab         00002760  00000000  00000000  00003078  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000169e  00000000  00000000  000057d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007165  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000091aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a2ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b230  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b672  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 31       	cpi	r26, 0x10	; 16
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e1       	ldi	r26, 0x10	; 16
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 33       	cpi	r26, 0x3A	; 58
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <main>
      8a:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e8       	ldi	r26, 0x8F	; 143
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e8       	ldi	r24, 0x8F	; 143
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e8       	ldi	r22, 0x8F	; 143
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_ES_tSetPinDirection+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_ES_tSetPinDirection+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	6a 83       	std	Y+2, r22	; 0x02
     cae:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	88 30       	cpi	r24, 0x08	; 8
     cb4:	18 f0       	brcs	.+6      	; 0xcbc <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	8c 83       	std	Y+4, r24	; 0x04
     cba:	d8 c0       	rjmp	.+432    	; 0xe6c <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	88 23       	and	r24, r24
     cc0:	91 f5       	brne	.+100    	; 0xd26 <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	a1 f4       	brne	.+40     	; 0xcf0 <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
     cc8:	aa e3       	ldi	r26, 0x3A	; 58
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	ea e3       	ldi	r30, 0x3A	; 58
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	48 2f       	mov	r20, r24
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 2e       	mov	r0, r18
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <DIO_ES_tSetPinDirection+0x48>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	0a 94       	dec	r0
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <DIO_ES_tSetPinDirection+0x44>
     cea:	84 2b       	or	r24, r20
     cec:	8c 93       	st	X, r24
     cee:	bd c0       	rjmp	.+378    	; 0xe6a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	88 23       	and	r24, r24
     cf4:	a9 f4       	brne	.+42     	; 0xd20 <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
     cf6:	aa e3       	ldi	r26, 0x3A	; 58
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	ea e3       	ldi	r30, 0x3A	; 58
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_ES_tSetPinDirection+0x76>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_ES_tSetPinDirection+0x72>
     d18:	80 95       	com	r24
     d1a:	84 23       	and	r24, r20
     d1c:	8c 93       	st	X, r24
     d1e:	a5 c0       	rjmp	.+330    	; 0xe6a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	8c 83       	std	Y+4, r24	; 0x04
     d24:	a3 c0       	rjmp	.+326    	; 0xe6c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	91 f5       	brne	.+100    	; 0xd90 <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	a1 f4       	brne	.+40     	; 0xd5a <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
     d32:	a7 e3       	ldi	r26, 0x37	; 55
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e7 e3       	ldi	r30, 0x37	; 55
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_ES_tSetPinDirection+0xb2>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_ES_tSetPinDirection+0xae>
     d54:	84 2b       	or	r24, r20
     d56:	8c 93       	st	X, r24
     d58:	88 c0       	rjmp	.+272    	; 0xe6a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	88 23       	and	r24, r24
     d5e:	a9 f4       	brne	.+42     	; 0xd8a <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
     d60:	a7 e3       	ldi	r26, 0x37	; 55
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e7 e3       	ldi	r30, 0x37	; 55
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	48 2f       	mov	r20, r24
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 2e       	mov	r0, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <DIO_ES_tSetPinDirection+0xe0>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	0a 94       	dec	r0
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <DIO_ES_tSetPinDirection+0xdc>
     d82:	80 95       	com	r24
     d84:	84 23       	and	r24, r20
     d86:	8c 93       	st	X, r24
     d88:	70 c0       	rjmp	.+224    	; 0xe6a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	8c 83       	std	Y+4, r24	; 0x04
     d8e:	6e c0       	rjmp	.+220    	; 0xe6c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	91 f5       	brne	.+100    	; 0xdfa <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	a1 f4       	brne	.+40     	; 0xdc4 <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
     d9c:	a4 e3       	ldi	r26, 0x34	; 52
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e4 e3       	ldi	r30, 0x34	; 52
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_ES_tSetPinDirection+0x11c>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_ES_tSetPinDirection+0x118>
     dbe:	84 2b       	or	r24, r20
     dc0:	8c 93       	st	X, r24
     dc2:	53 c0       	rjmp	.+166    	; 0xe6a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	88 23       	and	r24, r24
     dc8:	a9 f4       	brne	.+42     	; 0xdf4 <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
     dca:	a4 e3       	ldi	r26, 0x34	; 52
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e4 e3       	ldi	r30, 0x34	; 52
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	48 2f       	mov	r20, r24
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 2e       	mov	r0, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_ES_tSetPinDirection+0x14a>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	0a 94       	dec	r0
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <DIO_ES_tSetPinDirection+0x146>
     dec:	80 95       	com	r24
     dee:	84 23       	and	r24, r20
     df0:	8c 93       	st	X, r24
     df2:	3b c0       	rjmp	.+118    	; 0xe6a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	8c 83       	std	Y+4, r24	; 0x04
     df8:	39 c0       	rjmp	.+114    	; 0xe6c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	91 f5       	brne	.+100    	; 0xe64 <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	a1 f4       	brne	.+40     	; 0xe2e <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
     e06:	a1 e3       	ldi	r26, 0x31	; 49
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e1 e3       	ldi	r30, 0x31	; 49
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_ES_tSetPinDirection+0x186>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_ES_tSetPinDirection+0x182>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	1e c0       	rjmp	.+60     	; 0xe6a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	88 23       	and	r24, r24
     e32:	a9 f4       	brne	.+42     	; 0xe5e <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
     e34:	a1 e3       	ldi	r26, 0x31	; 49
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e1 e3       	ldi	r30, 0x31	; 49
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <DIO_ES_tSetPinDirection+0x1b4>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <DIO_ES_tSetPinDirection+0x1b0>
     e56:	80 95       	com	r24
     e58:	84 23       	and	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	06 c0       	rjmp	.+12     	; 0xe6a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	8c 83       	std	Y+4, r24	; 0x04
     e62:	04 c0       	rjmp	.+8      	; 0xe6c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	8c 83       	std	Y+4, r24	; 0x04
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
     e6a:	1c 82       	std	Y+4, r1	; 0x04
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <DIO_ES_tSetPinValue+0x6>
     e82:	00 d0       	rcall	.+0      	; 0xe84 <DIO_ES_tSetPinValue+0x8>
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	6a 83       	std	Y+2, r22	; 0x02
     e8c:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	88 30       	cpi	r24, 0x08	; 8
     e92:	18 f0       	brcs	.+6      	; 0xe9a <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	8c 83       	std	Y+4, r24	; 0x04
     e98:	d8 c0       	rjmp	.+432    	; 0x104a <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	88 23       	and	r24, r24
     e9e:	91 f5       	brne	.+100    	; 0xf04 <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	a1 f4       	brne	.+40     	; 0xece <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
     ea6:	ab e3       	ldi	r26, 0x3B	; 59
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	eb e3       	ldi	r30, 0x3B	; 59
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_ES_tSetPinValue+0x48>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_ES_tSetPinValue+0x44>
     ec8:	84 2b       	or	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	bd c0       	rjmp	.+378    	; 0x1048 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	88 23       	and	r24, r24
     ed2:	a9 f4       	brne	.+42     	; 0xefe <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
     ed4:	ab e3       	ldi	r26, 0x3B	; 59
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	eb e3       	ldi	r30, 0x3B	; 59
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_ES_tSetPinValue+0x76>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_ES_tSetPinValue+0x72>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	a5 c0       	rjmp	.+330    	; 0x1048 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	8c 83       	std	Y+4, r24	; 0x04
     f02:	a3 c0       	rjmp	.+326    	; 0x104a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	91 f5       	brne	.+100    	; 0xf6e <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	a1 f4       	brne	.+40     	; 0xf38 <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
     f10:	a8 e3       	ldi	r26, 0x38	; 56
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e8 e3       	ldi	r30, 0x38	; 56
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_ES_tSetPinValue+0xb2>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_ES_tSetPinValue+0xae>
     f32:	84 2b       	or	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	88 c0       	rjmp	.+272    	; 0x1048 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	88 23       	and	r24, r24
     f3c:	a9 f4       	brne	.+42     	; 0xf68 <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
     f3e:	a8 e3       	ldi	r26, 0x38	; 56
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e8 e3       	ldi	r30, 0x38	; 56
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_ES_tSetPinValue+0xe0>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_ES_tSetPinValue+0xdc>
     f60:	80 95       	com	r24
     f62:	84 23       	and	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	70 c0       	rjmp	.+224    	; 0x1048 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	8c 83       	std	Y+4, r24	; 0x04
     f6c:	6e c0       	rjmp	.+220    	; 0x104a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	91 f5       	brne	.+100    	; 0xfd8 <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	a1 f4       	brne	.+40     	; 0xfa2 <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
     f7a:	a5 e3       	ldi	r26, 0x35	; 53
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e5 e3       	ldi	r30, 0x35	; 53
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_ES_tSetPinValue+0x11c>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_ES_tSetPinValue+0x118>
     f9c:	84 2b       	or	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	53 c0       	rjmp	.+166    	; 0x1048 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	88 23       	and	r24, r24
     fa6:	a9 f4       	brne	.+42     	; 0xfd2 <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
     fa8:	a5 e3       	ldi	r26, 0x35	; 53
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e5 e3       	ldi	r30, 0x35	; 53
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_ES_tSetPinValue+0x14a>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_ES_tSetPinValue+0x146>
     fca:	80 95       	com	r24
     fcc:	84 23       	and	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	3b c0       	rjmp	.+118    	; 0x1048 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	8c 83       	std	Y+4, r24	; 0x04
     fd6:	39 c0       	rjmp	.+114    	; 0x104a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	83 30       	cpi	r24, 0x03	; 3
     fdc:	91 f5       	brne	.+100    	; 0x1042 <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	a1 f4       	brne	.+40     	; 0x100c <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
     fe4:	a2 e3       	ldi	r26, 0x32	; 50
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e2 e3       	ldi	r30, 0x32	; 50
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_ES_tSetPinValue+0x186>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_ES_tSetPinValue+0x182>
    1006:	84 2b       	or	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	1e c0       	rjmp	.+60     	; 0x1048 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	88 23       	and	r24, r24
    1010:	a9 f4       	brne	.+42     	; 0x103c <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    1012:	a2 e3       	ldi	r26, 0x32	; 50
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e2 e3       	ldi	r30, 0x32	; 50
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_ES_tSetPinValue+0x1b4>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_ES_tSetPinValue+0x1b0>
    1034:	80 95       	com	r24
    1036:	84 23       	and	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	06 c0       	rjmp	.+12     	; 0x1048 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	8c 83       	std	Y+4, r24	; 0x04
    1040:	04 c0       	rjmp	.+8      	; 0x104a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	8c 83       	std	Y+4, r24	; 0x04
    1046:	01 c0       	rjmp	.+2      	; 0x104a <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    1048:	1c 82       	std	Y+4, r1	; 0x04
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <DIO_ES_tGetPinValue+0x6>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <DIO_ES_tGetPinValue+0x8>
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	6a 83       	std	Y+2, r22	; 0x02
    106c:	5c 83       	std	Y+4, r21	; 0x04
    106e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	88 30       	cpi	r24, 0x08	; 8
    1074:	18 f0       	brcs	.+6      	; 0x107c <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    1076:	41 e0       	ldi	r20, 0x01	; 1
    1078:	4d 83       	std	Y+5, r20	; 0x05
    107a:	60 c0       	rjmp	.+192    	; 0x113c <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	88 23       	and	r24, r24
    1080:	a1 f4       	brne	.+40     	; 0x10aa <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    1082:	e9 e3       	ldi	r30, 0x39	; 57
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	a9 01       	movw	r20, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_ES_tGetPinValue+0x40>
    1096:	55 95       	asr	r21
    1098:	47 95       	ror	r20
    109a:	8a 95       	dec	r24
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_ES_tGetPinValue+0x3c>
    109e:	ca 01       	movw	r24, r20
    10a0:	81 70       	andi	r24, 0x01	; 1
    10a2:	eb 81       	ldd	r30, Y+3	; 0x03
    10a4:	fc 81       	ldd	r31, Y+4	; 0x04
    10a6:	80 83       	st	Z, r24
    10a8:	48 c0       	rjmp	.+144    	; 0x113a <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	a1 f4       	brne	.+40     	; 0x10d8 <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    10b0:	e6 e3       	ldi	r30, 0x36	; 54
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	a9 01       	movw	r20, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_ES_tGetPinValue+0x6e>
    10c4:	55 95       	asr	r21
    10c6:	47 95       	ror	r20
    10c8:	8a 95       	dec	r24
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_ES_tGetPinValue+0x6a>
    10cc:	ca 01       	movw	r24, r20
    10ce:	81 70       	andi	r24, 0x01	; 1
    10d0:	eb 81       	ldd	r30, Y+3	; 0x03
    10d2:	fc 81       	ldd	r31, Y+4	; 0x04
    10d4:	80 83       	st	Z, r24
    10d6:	31 c0       	rjmp	.+98     	; 0x113a <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	82 30       	cpi	r24, 0x02	; 2
    10dc:	a1 f4       	brne	.+40     	; 0x1106 <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    10de:	e3 e3       	ldi	r30, 0x33	; 51
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a9 01       	movw	r20, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_ES_tGetPinValue+0x9c>
    10f2:	55 95       	asr	r21
    10f4:	47 95       	ror	r20
    10f6:	8a 95       	dec	r24
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_ES_tGetPinValue+0x98>
    10fa:	ca 01       	movw	r24, r20
    10fc:	81 70       	andi	r24, 0x01	; 1
    10fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1100:	fc 81       	ldd	r31, Y+4	; 0x04
    1102:	80 83       	st	Z, r24
    1104:	1a c0       	rjmp	.+52     	; 0x113a <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	83 30       	cpi	r24, 0x03	; 3
    110a:	a1 f4       	brne	.+40     	; 0x1134 <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    110c:	e0 e3       	ldi	r30, 0x30	; 48
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	88 2f       	mov	r24, r24
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	a9 01       	movw	r20, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_ES_tGetPinValue+0xca>
    1120:	55 95       	asr	r21
    1122:	47 95       	ror	r20
    1124:	8a 95       	dec	r24
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_ES_tGetPinValue+0xc6>
    1128:	ca 01       	movw	r24, r20
    112a:	81 70       	andi	r24, 0x01	; 1
    112c:	eb 81       	ldd	r30, Y+3	; 0x03
    112e:	fc 81       	ldd	r31, Y+4	; 0x04
    1130:	80 83       	st	Z, r24
    1132:	03 c0       	rjmp	.+6      	; 0x113a <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    1134:	51 e0       	ldi	r21, 0x01	; 1
    1136:	5d 83       	std	Y+5, r21	; 0x05
    1138:	01 c0       	rjmp	.+2      	; 0x113c <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    113a:	1d 82       	std	Y+5, r1	; 0x05
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <DIO_ES_tSetPortDirection+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <DIO_ES_tSetPortDirection+0x8>
    1156:	0f 92       	push	r0
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	31 f0       	breq	.+12     	; 0x1172 <DIO_ES_tSetPortDirection+0x24>
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	19 f0       	breq	.+6      	; 0x1172 <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    116c:	21 e0       	ldi	r18, 0x01	; 1
    116e:	2d 83       	std	Y+5, r18	; 0x05
    1170:	53 c0       	rjmp	.+166    	; 0x1218 <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3c 83       	std	Y+4, r19	; 0x04
    117a:	2b 83       	std	Y+3, r18	; 0x03
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	91 05       	cpc	r25, r1
    1184:	09 f1       	breq	.+66     	; 0x11c8 <DIO_ES_tSetPortDirection+0x7a>
    1186:	2b 81       	ldd	r18, Y+3	; 0x03
    1188:	3c 81       	ldd	r19, Y+4	; 0x04
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	2c f4       	brge	.+10     	; 0x119a <DIO_ES_tSetPortDirection+0x4c>
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	61 f0       	breq	.+24     	; 0x11b0 <DIO_ES_tSetPortDirection+0x62>
    1198:	3b c0       	rjmp	.+118    	; 0x1210 <DIO_ES_tSetPortDirection+0xc2>
    119a:	2b 81       	ldd	r18, Y+3	; 0x03
    119c:	3c 81       	ldd	r19, Y+4	; 0x04
    119e:	22 30       	cpi	r18, 0x02	; 2
    11a0:	31 05       	cpc	r19, r1
    11a2:	f1 f0       	breq	.+60     	; 0x11e0 <DIO_ES_tSetPortDirection+0x92>
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	91 05       	cpc	r25, r1
    11ac:	29 f1       	breq	.+74     	; 0x11f8 <DIO_ES_tSetPortDirection+0xaa>
    11ae:	30 c0       	rjmp	.+96     	; 0x1210 <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	29 f4       	brne	.+10     	; 0x11c0 <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    11b6:	ea e3       	ldi	r30, 0x3A	; 58
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	8f ef       	ldi	r24, 0xFF	; 255
    11bc:	80 83       	st	Z, r24
    11be:	2b c0       	rjmp	.+86     	; 0x1216 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    11c0:	ea e3       	ldi	r30, 0x3A	; 58
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	10 82       	st	Z, r1
    11c6:	27 c0       	rjmp	.+78     	; 0x1216 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	29 f4       	brne	.+10     	; 0x11d8 <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    11ce:	e7 e3       	ldi	r30, 0x37	; 55
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	8f ef       	ldi	r24, 0xFF	; 255
    11d4:	80 83       	st	Z, r24
    11d6:	1f c0       	rjmp	.+62     	; 0x1216 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    11d8:	e7 e3       	ldi	r30, 0x37	; 55
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	10 82       	st	Z, r1
    11de:	1b c0       	rjmp	.+54     	; 0x1216 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	29 f4       	brne	.+10     	; 0x11f0 <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    11e6:	e4 e3       	ldi	r30, 0x34	; 52
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	8f ef       	ldi	r24, 0xFF	; 255
    11ec:	80 83       	st	Z, r24
    11ee:	13 c0       	rjmp	.+38     	; 0x1216 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    11f0:	e4 e3       	ldi	r30, 0x34	; 52
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	10 82       	st	Z, r1
    11f6:	0f c0       	rjmp	.+30     	; 0x1216 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	29 f4       	brne	.+10     	; 0x1208 <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    11fe:	e1 e3       	ldi	r30, 0x31	; 49
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	8f ef       	ldi	r24, 0xFF	; 255
    1204:	80 83       	st	Z, r24
    1206:	07 c0       	rjmp	.+14     	; 0x1216 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    1208:	e1 e3       	ldi	r30, 0x31	; 49
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	10 82       	st	Z, r1
    120e:	03 c0       	rjmp	.+6      	; 0x1216 <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	9d 83       	std	Y+5, r25	; 0x05
    1214:	01 c0       	rjmp	.+2      	; 0x1218 <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    1216:	1d 82       	std	Y+5, r1	; 0x05
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	00 d0       	rcall	.+0      	; 0x1230 <DIO_ES_tSetPortValue+0x6>
    1230:	00 d0       	rcall	.+0      	; 0x1232 <DIO_ES_tSetPortValue+0x8>
    1232:	0f 92       	push	r0
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	31 f0       	breq	.+12     	; 0x124e <DIO_ES_tSetPortValue+0x24>
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	88 23       	and	r24, r24
    1246:	19 f0       	breq	.+6      	; 0x124e <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    1248:	21 e0       	ldi	r18, 0x01	; 1
    124a:	2d 83       	std	Y+5, r18	; 0x05
    124c:	53 c0       	rjmp	.+166    	; 0x12f4 <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3c 83       	std	Y+4, r19	; 0x04
    1256:	2b 83       	std	Y+3, r18	; 0x03
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	91 05       	cpc	r25, r1
    1260:	09 f1       	breq	.+66     	; 0x12a4 <DIO_ES_tSetPortValue+0x7a>
    1262:	2b 81       	ldd	r18, Y+3	; 0x03
    1264:	3c 81       	ldd	r19, Y+4	; 0x04
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	2c f4       	brge	.+10     	; 0x1276 <DIO_ES_tSetPortValue+0x4c>
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	61 f0       	breq	.+24     	; 0x128c <DIO_ES_tSetPortValue+0x62>
    1274:	3b c0       	rjmp	.+118    	; 0x12ec <DIO_ES_tSetPortValue+0xc2>
    1276:	2b 81       	ldd	r18, Y+3	; 0x03
    1278:	3c 81       	ldd	r19, Y+4	; 0x04
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	f1 f0       	breq	.+60     	; 0x12bc <DIO_ES_tSetPortValue+0x92>
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	91 05       	cpc	r25, r1
    1288:	29 f1       	breq	.+74     	; 0x12d4 <DIO_ES_tSetPortValue+0xaa>
    128a:	30 c0       	rjmp	.+96     	; 0x12ec <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	29 f4       	brne	.+10     	; 0x129c <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    1292:	eb e3       	ldi	r30, 0x3B	; 59
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	8f ef       	ldi	r24, 0xFF	; 255
    1298:	80 83       	st	Z, r24
    129a:	2b c0       	rjmp	.+86     	; 0x12f2 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    129c:	eb e3       	ldi	r30, 0x3B	; 59
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	10 82       	st	Z, r1
    12a2:	27 c0       	rjmp	.+78     	; 0x12f2 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	29 f4       	brne	.+10     	; 0x12b4 <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    12aa:	e8 e3       	ldi	r30, 0x38	; 56
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	80 83       	st	Z, r24
    12b2:	1f c0       	rjmp	.+62     	; 0x12f2 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    12b4:	e8 e3       	ldi	r30, 0x38	; 56
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	10 82       	st	Z, r1
    12ba:	1b c0       	rjmp	.+54     	; 0x12f2 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	29 f4       	brne	.+10     	; 0x12cc <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    12c2:	e5 e3       	ldi	r30, 0x35	; 53
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	8f ef       	ldi	r24, 0xFF	; 255
    12c8:	80 83       	st	Z, r24
    12ca:	13 c0       	rjmp	.+38     	; 0x12f2 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    12cc:	e5 e3       	ldi	r30, 0x35	; 53
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	10 82       	st	Z, r1
    12d2:	0f c0       	rjmp	.+30     	; 0x12f2 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	29 f4       	brne	.+10     	; 0x12e4 <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    12da:	e2 e3       	ldi	r30, 0x32	; 50
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	80 83       	st	Z, r24
    12e2:	07 c0       	rjmp	.+14     	; 0x12f2 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    12e4:	e2 e3       	ldi	r30, 0x32	; 50
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	10 82       	st	Z, r1
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	9d 83       	std	Y+5, r25	; 0x05
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    12f2:	1d 82       	std	Y+5, r1	; 0x05
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <DIO_ES_tTOGPin+0x6>
    130c:	0f 92       	push	r0
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	88 30       	cpi	r24, 0x08	; 8
    131a:	18 f0       	brcs	.+6      	; 0x1322 <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	8b 83       	std	Y+3, r24	; 0x03
    1320:	60 c0       	rjmp	.+192    	; 0x13e2 <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	88 23       	and	r24, r24
    1326:	a1 f4       	brne	.+40     	; 0x1350 <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    1328:	ab e3       	ldi	r26, 0x3B	; 59
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	eb e3       	ldi	r30, 0x3B	; 59
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_ES_tTOGPin+0x40>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_ES_tTOGPin+0x3c>
    134a:	84 27       	eor	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	48 c0       	rjmp	.+144    	; 0x13e0 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	a1 f4       	brne	.+40     	; 0x137e <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    1356:	a8 e3       	ldi	r26, 0x38	; 56
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e8 e3       	ldi	r30, 0x38	; 56
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <DIO_ES_tTOGPin+0x6e>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <DIO_ES_tTOGPin+0x6a>
    1378:	84 27       	eor	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	31 c0       	rjmp	.+98     	; 0x13e0 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	a1 f4       	brne	.+40     	; 0x13ac <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    1384:	a5 e3       	ldi	r26, 0x35	; 53
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e5 e3       	ldi	r30, 0x35	; 53
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_ES_tTOGPin+0x9c>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_ES_tTOGPin+0x98>
    13a6:	84 27       	eor	r24, r20
    13a8:	8c 93       	st	X, r24
    13aa:	1a c0       	rjmp	.+52     	; 0x13e0 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	83 30       	cpi	r24, 0x03	; 3
    13b0:	a1 f4       	brne	.+40     	; 0x13da <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    13b2:	a2 e3       	ldi	r26, 0x32	; 50
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e2 e3       	ldi	r30, 0x32	; 50
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_ES_tTOGPin+0xca>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_ES_tTOGPin+0xc6>
    13d4:	84 27       	eor	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	8b 83       	std	Y+3, r24	; 0x03
    13de:	01 c0       	rjmp	.+2      	; 0x13e2 <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    13e0:	1b 82       	std	Y+3, r1	; 0x03
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <DIO_ES_tInit+0x6>
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    13fa:	1a 82       	std	Y+2, r1	; 0x02
    13fc:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    13fe:	1a 82       	std	Y+2, r1	; 0x02
    1400:	19 82       	std	Y+1, r1	; 0x01
    1402:	a3 c2       	rjmp	.+1350   	; 0x194a <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	9a 81       	ldd	r25, Y+2	; 0x02
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	fc 01       	movw	r30, r24
    1412:	e9 56       	subi	r30, 0x69	; 105
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	80 81       	ld	r24, Z
    1418:	88 23       	and	r24, r24
    141a:	09 f0       	breq	.+2      	; 0x141e <DIO_ES_tInit+0x2e>
    141c:	9b c0       	rjmp	.+310    	; 0x1554 <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	fc 01       	movw	r30, r24
    142e:	e9 56       	subi	r30, 0x69	; 105
    1430:	ff 4f       	sbci	r31, 0xFF	; 255
    1432:	80 81       	ld	r24, Z
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	e9 f4       	brne	.+58     	; 0x1472 <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    1438:	aa e3       	ldi	r26, 0x3A	; 58
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	ea e3       	ldi	r30, 0x3A	; 58
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	9a 81       	ldd	r25, Y+2	; 0x02
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	fc 01       	movw	r30, r24
    1452:	e8 56       	subi	r30, 0x68	; 104
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	80 81       	ld	r24, Z
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 2e       	mov	r0, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <DIO_ES_tInit+0x78>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	0a 94       	dec	r0
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <DIO_ES_tInit+0x74>
    146c:	84 2b       	or	r24, r20
    146e:	8c 93       	st	X, r24
    1470:	67 c2       	rjmp	.+1230   	; 0x1940 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    1472:	aa e3       	ldi	r26, 0x3A	; 58
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ea e3       	ldi	r30, 0x3A	; 58
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	fc 01       	movw	r30, r24
    148c:	e8 56       	subi	r30, 0x68	; 104
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	80 81       	ld	r24, Z
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_ES_tInit+0xb2>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_ES_tInit+0xae>
    14a6:	80 95       	com	r24
    14a8:	84 23       	and	r24, r20
    14aa:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	fc 01       	movw	r30, r24
    14ba:	e6 56       	subi	r30, 0x66	; 102
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	80 81       	ld	r24, Z
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	e9 f4       	brne	.+58     	; 0x14fe <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    14c4:	ab e3       	ldi	r26, 0x3B	; 59
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	eb e3       	ldi	r30, 0x3B	; 59
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	fc 01       	movw	r30, r24
    14de:	e8 56       	subi	r30, 0x68	; 104
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	80 81       	ld	r24, Z
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <DIO_ES_tInit+0x104>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <DIO_ES_tInit+0x100>
    14f8:	84 2b       	or	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	21 c2       	rjmp	.+1090   	; 0x1940 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	fc 01       	movw	r30, r24
    150c:	e6 56       	subi	r30, 0x66	; 102
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	80 81       	ld	r24, Z
    1512:	88 23       	and	r24, r24
    1514:	09 f0       	breq	.+2      	; 0x1518 <DIO_ES_tInit+0x128>
    1516:	14 c2       	rjmp	.+1064   	; 0x1940 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1518:	ab e3       	ldi	r26, 0x3B	; 59
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	eb e3       	ldi	r30, 0x3B	; 59
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	9a 81       	ldd	r25, Y+2	; 0x02
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	fc 01       	movw	r30, r24
    1532:	e8 56       	subi	r30, 0x68	; 104
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	80 81       	ld	r24, Z
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_ES_tInit+0x158>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_ES_tInit+0x154>
    154c:	80 95       	com	r24
    154e:	84 23       	and	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	f6 c1       	rjmp	.+1004   	; 0x1940 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	fc 01       	movw	r30, r24
    1562:	e9 56       	subi	r30, 0x69	; 105
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	80 81       	ld	r24, Z
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	09 f0       	breq	.+2      	; 0x156e <DIO_ES_tInit+0x17e>
    156c:	9b c0       	rjmp	.+310    	; 0x16a4 <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	fc 01       	movw	r30, r24
    157e:	e9 56       	subi	r30, 0x69	; 105
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	80 81       	ld	r24, Z
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	e9 f4       	brne	.+58     	; 0x15c2 <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    1588:	a7 e3       	ldi	r26, 0x37	; 55
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e7 e3       	ldi	r30, 0x37	; 55
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	9a 81       	ldd	r25, Y+2	; 0x02
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	fc 01       	movw	r30, r24
    15a2:	e8 56       	subi	r30, 0x68	; 104
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	80 81       	ld	r24, Z
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <DIO_ES_tInit+0x1c8>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <DIO_ES_tInit+0x1c4>
    15bc:	84 2b       	or	r24, r20
    15be:	8c 93       	st	X, r24
    15c0:	bf c1       	rjmp	.+894    	; 0x1940 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    15c2:	a7 e3       	ldi	r26, 0x37	; 55
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e7 e3       	ldi	r30, 0x37	; 55
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	48 2f       	mov	r20, r24
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	fc 01       	movw	r30, r24
    15dc:	e8 56       	subi	r30, 0x68	; 104
    15de:	ff 4f       	sbci	r31, 0xFF	; 255
    15e0:	80 81       	ld	r24, Z
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_ES_tInit+0x202>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <DIO_ES_tInit+0x1fe>
    15f6:	80 95       	com	r24
    15f8:	84 23       	and	r24, r20
    15fa:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	fc 01       	movw	r30, r24
    160a:	e6 56       	subi	r30, 0x66	; 102
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	80 81       	ld	r24, Z
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	e9 f4       	brne	.+58     	; 0x164e <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    1614:	a8 e3       	ldi	r26, 0x38	; 56
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e8 e3       	ldi	r30, 0x38	; 56
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	48 2f       	mov	r20, r24
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	fc 01       	movw	r30, r24
    162e:	e8 56       	subi	r30, 0x68	; 104
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	80 81       	ld	r24, Z
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_ES_tInit+0x254>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_ES_tInit+0x250>
    1648:	84 2b       	or	r24, r20
    164a:	8c 93       	st	X, r24
    164c:	79 c1       	rjmp	.+754    	; 0x1940 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	9a 81       	ldd	r25, Y+2	; 0x02
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	fc 01       	movw	r30, r24
    165c:	e6 56       	subi	r30, 0x66	; 102
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	80 81       	ld	r24, Z
    1662:	88 23       	and	r24, r24
    1664:	09 f0       	breq	.+2      	; 0x1668 <DIO_ES_tInit+0x278>
    1666:	6c c1       	rjmp	.+728    	; 0x1940 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1668:	ab e3       	ldi	r26, 0x3B	; 59
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	eb e3       	ldi	r30, 0x3B	; 59
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	fc 01       	movw	r30, r24
    1682:	e8 56       	subi	r30, 0x68	; 104
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	80 81       	ld	r24, Z
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <DIO_ES_tInit+0x2a8>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <DIO_ES_tInit+0x2a4>
    169c:	80 95       	com	r24
    169e:	84 23       	and	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	4e c1       	rjmp	.+668    	; 0x1940 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	9a 81       	ldd	r25, Y+2	; 0x02
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	fc 01       	movw	r30, r24
    16b2:	e9 56       	subi	r30, 0x69	; 105
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	80 81       	ld	r24, Z
    16b8:	82 30       	cpi	r24, 0x02	; 2
    16ba:	09 f0       	breq	.+2      	; 0x16be <DIO_ES_tInit+0x2ce>
    16bc:	9b c0       	rjmp	.+310    	; 0x17f4 <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	9a 81       	ldd	r25, Y+2	; 0x02
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	01 96       	adiw	r24, 0x01	; 1
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	fc 01       	movw	r30, r24
    16ce:	e9 56       	subi	r30, 0x69	; 105
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	80 81       	ld	r24, Z
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	e9 f4       	brne	.+58     	; 0x1712 <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    16d8:	a4 e3       	ldi	r26, 0x34	; 52
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e4 e3       	ldi	r30, 0x34	; 52
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	9a 81       	ldd	r25, Y+2	; 0x02
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	fc 01       	movw	r30, r24
    16f2:	e8 56       	subi	r30, 0x68	; 104
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	80 81       	ld	r24, Z
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <DIO_ES_tInit+0x318>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <DIO_ES_tInit+0x314>
    170c:	84 2b       	or	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	17 c1       	rjmp	.+558    	; 0x1940 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    1712:	a4 e3       	ldi	r26, 0x34	; 52
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e4 e3       	ldi	r30, 0x34	; 52
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	9a 81       	ldd	r25, Y+2	; 0x02
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	fc 01       	movw	r30, r24
    172c:	e8 56       	subi	r30, 0x68	; 104
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	80 81       	ld	r24, Z
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <DIO_ES_tInit+0x352>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <DIO_ES_tInit+0x34e>
    1746:	80 95       	com	r24
    1748:	84 23       	and	r24, r20
    174a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	fc 01       	movw	r30, r24
    175a:	e6 56       	subi	r30, 0x66	; 102
    175c:	ff 4f       	sbci	r31, 0xFF	; 255
    175e:	80 81       	ld	r24, Z
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	e9 f4       	brne	.+58     	; 0x179e <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    1764:	a5 e3       	ldi	r26, 0x35	; 53
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e5 e3       	ldi	r30, 0x35	; 53
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	48 2f       	mov	r20, r24
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	fc 01       	movw	r30, r24
    177e:	e8 56       	subi	r30, 0x68	; 104
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	80 81       	ld	r24, Z
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 2e       	mov	r0, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <DIO_ES_tInit+0x3a4>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	0a 94       	dec	r0
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <DIO_ES_tInit+0x3a0>
    1798:	84 2b       	or	r24, r20
    179a:	8c 93       	st	X, r24
    179c:	d1 c0       	rjmp	.+418    	; 0x1940 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	9a 81       	ldd	r25, Y+2	; 0x02
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	fc 01       	movw	r30, r24
    17ac:	e6 56       	subi	r30, 0x66	; 102
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	80 81       	ld	r24, Z
    17b2:	88 23       	and	r24, r24
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <DIO_ES_tInit+0x3c8>
    17b6:	c4 c0       	rjmp	.+392    	; 0x1940 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    17b8:	ab e3       	ldi	r26, 0x3B	; 59
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	eb e3       	ldi	r30, 0x3B	; 59
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	9a 81       	ldd	r25, Y+2	; 0x02
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	fc 01       	movw	r30, r24
    17d2:	e8 56       	subi	r30, 0x68	; 104
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	80 81       	ld	r24, Z
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <DIO_ES_tInit+0x3f8>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <DIO_ES_tInit+0x3f4>
    17ec:	80 95       	com	r24
    17ee:	84 23       	and	r24, r20
    17f0:	8c 93       	st	X, r24
    17f2:	a6 c0       	rjmp	.+332    	; 0x1940 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	fc 01       	movw	r30, r24
    1802:	e9 56       	subi	r30, 0x69	; 105
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	80 81       	ld	r24, Z
    1808:	83 30       	cpi	r24, 0x03	; 3
    180a:	09 f0       	breq	.+2      	; 0x180e <DIO_ES_tInit+0x41e>
    180c:	99 c0       	rjmp	.+306    	; 0x1940 <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	fc 01       	movw	r30, r24
    181e:	e9 56       	subi	r30, 0x69	; 105
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 81       	ld	r24, Z
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	e9 f4       	brne	.+58     	; 0x1862 <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    1828:	a1 e3       	ldi	r26, 0x31	; 49
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e1 e3       	ldi	r30, 0x31	; 49
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	9a 81       	ldd	r25, Y+2	; 0x02
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	fc 01       	movw	r30, r24
    1842:	e8 56       	subi	r30, 0x68	; 104
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 81       	ld	r24, Z
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <DIO_ES_tInit+0x468>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <DIO_ES_tInit+0x464>
    185c:	84 2b       	or	r24, r20
    185e:	8c 93       	st	X, r24
    1860:	6f c0       	rjmp	.+222    	; 0x1940 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    1862:	a1 e3       	ldi	r26, 0x31	; 49
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e1 e3       	ldi	r30, 0x31	; 49
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	9a 81       	ldd	r25, Y+2	; 0x02
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	fc 01       	movw	r30, r24
    187c:	e8 56       	subi	r30, 0x68	; 104
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	80 81       	ld	r24, Z
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	02 2e       	mov	r0, r18
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <DIO_ES_tInit+0x4a2>
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	0a 94       	dec	r0
    1894:	e2 f7       	brpl	.-8      	; 0x188e <DIO_ES_tInit+0x49e>
    1896:	80 95       	com	r24
    1898:	84 23       	and	r24, r20
    189a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	9a 81       	ldd	r25, Y+2	; 0x02
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	fc 01       	movw	r30, r24
    18aa:	e6 56       	subi	r30, 0x66	; 102
    18ac:	ff 4f       	sbci	r31, 0xFF	; 255
    18ae:	80 81       	ld	r24, Z
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	e9 f4       	brne	.+58     	; 0x18ee <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    18b4:	a2 e3       	ldi	r26, 0x32	; 50
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e2 e3       	ldi	r30, 0x32	; 50
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	48 2f       	mov	r20, r24
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	fc 01       	movw	r30, r24
    18ce:	e8 56       	subi	r30, 0x68	; 104
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	80 81       	ld	r24, Z
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	02 2e       	mov	r0, r18
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <DIO_ES_tInit+0x4f4>
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	0a 94       	dec	r0
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <DIO_ES_tInit+0x4f0>
    18e8:	84 2b       	or	r24, r20
    18ea:	8c 93       	st	X, r24
    18ec:	29 c0       	rjmp	.+82     	; 0x1940 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	9a 81       	ldd	r25, Y+2	; 0x02
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	fc 01       	movw	r30, r24
    18fc:	e6 56       	subi	r30, 0x66	; 102
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 81       	ld	r24, Z
    1902:	88 23       	and	r24, r24
    1904:	e9 f4       	brne	.+58     	; 0x1940 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1906:	ab e3       	ldi	r26, 0x3B	; 59
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	eb e3       	ldi	r30, 0x3B	; 59
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	48 2f       	mov	r20, r24
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	fc 01       	movw	r30, r24
    1920:	e8 56       	subi	r30, 0x68	; 104
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	80 81       	ld	r24, Z
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <DIO_ES_tInit+0x546>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <DIO_ES_tInit+0x542>
    193a:	80 95       	com	r24
    193c:	84 23       	and	r24, r20
    193e:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	9a 83       	std	Y+2, r25	; 0x02
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	9a 81       	ldd	r25, Y+2	; 0x02
    194e:	88 31       	cpi	r24, 0x18	; 24
    1950:	91 05       	cpc	r25, r1
    1952:	0c f4       	brge	.+2      	; 0x1956 <DIO_ES_tInit+0x566>
    1954:	57 cd       	rjmp	.-1362   	; 0x1404 <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    1956:	80 e0       	ldi	r24, 0x00	; 0
}
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	e0 97       	sbiw	r28, 0x30	; 48
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	62 e0       	ldi	r22, 0x02	; 2
    197a:	41 e0       	ldi	r20, 0x01	; 1
    197c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 e2       	ldi	r26, 0x20	; 32
    1986:	b1 e4       	ldi	r27, 0x41	; 65
    1988:	8d a7       	std	Y+45, r24	; 0x2d
    198a:	9e a7       	std	Y+46, r25	; 0x2e
    198c:	af a7       	std	Y+47, r26	; 0x2f
    198e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1990:	6d a5       	ldd	r22, Y+45	; 0x2d
    1992:	7e a5       	ldd	r23, Y+46	; 0x2e
    1994:	8f a5       	ldd	r24, Y+47	; 0x2f
    1996:	98 a9       	ldd	r25, Y+48	; 0x30
    1998:	2b ea       	ldi	r18, 0xAB	; 171
    199a:	3a ea       	ldi	r19, 0xAA	; 170
    199c:	4a ea       	ldi	r20, 0xAA	; 170
    199e:	50 e4       	ldi	r21, 0x40	; 64
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	89 a7       	std	Y+41, r24	; 0x29
    19aa:	9a a7       	std	Y+42, r25	; 0x2a
    19ac:	ab a7       	std	Y+43, r26	; 0x2b
    19ae:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    19b0:	69 a5       	ldd	r22, Y+41	; 0x29
    19b2:	7a a5       	ldd	r23, Y+42	; 0x2a
    19b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    19b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e8       	ldi	r20, 0x80	; 128
    19be:	5f e3       	ldi	r21, 0x3F	; 63
    19c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c4:	88 23       	and	r24, r24
    19c6:	1c f4       	brge	.+6      	; 0x19ce <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	88 a7       	std	Y+40, r24	; 0x28
    19cc:	91 c0       	rjmp	.+290    	; 0x1af0 <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    19ce:	69 a5       	ldd	r22, Y+41	; 0x29
    19d0:	7a a5       	ldd	r23, Y+42	; 0x2a
    19d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    19d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	53 e4       	ldi	r21, 0x43	; 67
    19de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	0c f0       	brlt	.+2      	; 0x19e8 <LCD_ES_tTrigger_Enable+0x86>
    19e6:	7b c0       	rjmp	.+246    	; 0x1ade <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    19e8:	6d a5       	ldd	r22, Y+45	; 0x2d
    19ea:	7e a5       	ldd	r23, Y+46	; 0x2e
    19ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ee:	98 a9       	ldd	r25, Y+48	; 0x30
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	4a e7       	ldi	r20, 0x7A	; 122
    19f6:	54 e4       	ldi	r21, 0x44	; 68
    19f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	8c a3       	std	Y+36, r24	; 0x24
    1a02:	9d a3       	std	Y+37, r25	; 0x25
    1a04:	ae a3       	std	Y+38, r26	; 0x26
    1a06:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a08:	6c a1       	ldd	r22, Y+36	; 0x24
    1a0a:	7d a1       	ldd	r23, Y+37	; 0x25
    1a0c:	8e a1       	ldd	r24, Y+38	; 0x26
    1a0e:	9f a1       	ldd	r25, Y+39	; 0x27
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	4a e7       	ldi	r20, 0x7A	; 122
    1a16:	55 e4       	ldi	r21, 0x45	; 69
    1a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	88 a3       	std	Y+32, r24	; 0x20
    1a22:	99 a3       	std	Y+33, r25	; 0x21
    1a24:	aa a3       	std	Y+34, r26	; 0x22
    1a26:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1a28:	68 a1       	ldd	r22, Y+32	; 0x20
    1a2a:	79 a1       	ldd	r23, Y+33	; 0x21
    1a2c:	8a a1       	ldd	r24, Y+34	; 0x22
    1a2e:	9b a1       	ldd	r25, Y+35	; 0x23
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	2c f4       	brge	.+10     	; 0x1a4a <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9f 8f       	std	Y+31, r25	; 0x1f
    1a46:	8e 8f       	std	Y+30, r24	; 0x1e
    1a48:	3f c0       	rjmp	.+126    	; 0x1ac8 <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    1a4a:	68 a1       	ldd	r22, Y+32	; 0x20
    1a4c:	79 a1       	ldd	r23, Y+33	; 0x21
    1a4e:	8a a1       	ldd	r24, Y+34	; 0x22
    1a50:	9b a1       	ldd	r25, Y+35	; 0x23
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	3f ef       	ldi	r19, 0xFF	; 255
    1a56:	4f e7       	ldi	r20, 0x7F	; 127
    1a58:	57 e4       	ldi	r21, 0x47	; 71
    1a5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a5e:	18 16       	cp	r1, r24
    1a60:	4c f5       	brge	.+82     	; 0x1ab4 <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a62:	6c a1       	ldd	r22, Y+36	; 0x24
    1a64:	7d a1       	ldd	r23, Y+37	; 0x25
    1a66:	8e a1       	ldd	r24, Y+38	; 0x26
    1a68:	9f a1       	ldd	r25, Y+39	; 0x27
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e2       	ldi	r20, 0x20	; 32
    1a70:	51 e4       	ldi	r21, 0x41	; 65
    1a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	bc 01       	movw	r22, r24
    1a7c:	cd 01       	movw	r24, r26
    1a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9f 8f       	std	Y+31, r25	; 0x1f
    1a88:	8e 8f       	std	Y+30, r24	; 0x1e
    1a8a:	0f c0       	rjmp	.+30     	; 0x1aaa <LCD_ES_tTrigger_Enable+0x148>
    1a8c:	80 e9       	ldi	r24, 0x90	; 144
    1a8e:	91 e0       	ldi	r25, 0x01	; 1
    1a90:	9d 8f       	std	Y+29, r25	; 0x1d
    1a92:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a94:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a96:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <LCD_ES_tTrigger_Enable+0x136>
    1a9c:	9d 8f       	std	Y+29, r25	; 0x1d
    1a9e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aa2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	9f 8f       	std	Y+31, r25	; 0x1f
    1aa8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aaa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	69 f7       	brne	.-38     	; 0x1a8c <LCD_ES_tTrigger_Enable+0x12a>
    1ab2:	24 c0       	rjmp	.+72     	; 0x1afc <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab4:	68 a1       	ldd	r22, Y+32	; 0x20
    1ab6:	79 a1       	ldd	r23, Y+33	; 0x21
    1ab8:	8a a1       	ldd	r24, Y+34	; 0x22
    1aba:	9b a1       	ldd	r25, Y+35	; 0x23
    1abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	9f 8f       	std	Y+31, r25	; 0x1f
    1ac6:	8e 8f       	std	Y+30, r24	; 0x1e
    1ac8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1acc:	9b 8f       	std	Y+27, r25	; 0x1b
    1ace:	8a 8f       	std	Y+26, r24	; 0x1a
    1ad0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ad2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <LCD_ES_tTrigger_Enable+0x172>
    1ad8:	9b 8f       	std	Y+27, r25	; 0x1b
    1ada:	8a 8f       	std	Y+26, r24	; 0x1a
    1adc:	0f c0       	rjmp	.+30     	; 0x1afc <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ade:	69 a5       	ldd	r22, Y+41	; 0x29
    1ae0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ae2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ae4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	88 a7       	std	Y+40, r24	; 0x28
    1af0:	88 a5       	ldd	r24, Y+40	; 0x28
    1af2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1af4:	89 8d       	ldd	r24, Y+25	; 0x19
    1af6:	8a 95       	dec	r24
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_ES_tTrigger_Enable+0x194>
    1afa:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	62 e0       	ldi	r22, 0x02	; 2
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	aa ef       	ldi	r26, 0xFA	; 250
    1b0c:	b4 e4       	ldi	r27, 0x44	; 68
    1b0e:	8d 8b       	std	Y+21, r24	; 0x15
    1b10:	9e 8b       	std	Y+22, r25	; 0x16
    1b12:	af 8b       	std	Y+23, r26	; 0x17
    1b14:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b16:	6d 89       	ldd	r22, Y+21	; 0x15
    1b18:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1e:	2b ea       	ldi	r18, 0xAB	; 171
    1b20:	3a ea       	ldi	r19, 0xAA	; 170
    1b22:	4a ea       	ldi	r20, 0xAA	; 170
    1b24:	50 e4       	ldi	r21, 0x40	; 64
    1b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	89 8b       	std	Y+17, r24	; 0x11
    1b30:	9a 8b       	std	Y+18, r25	; 0x12
    1b32:	ab 8b       	std	Y+19, r26	; 0x13
    1b34:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1b36:	69 89       	ldd	r22, Y+17	; 0x11
    1b38:	7a 89       	ldd	r23, Y+18	; 0x12
    1b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e8       	ldi	r20, 0x80	; 128
    1b44:	5f e3       	ldi	r21, 0x3F	; 63
    1b46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b4a:	88 23       	and	r24, r24
    1b4c:	1c f4       	brge	.+6      	; 0x1b54 <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	88 8b       	std	Y+16, r24	; 0x10
    1b52:	91 c0       	rjmp	.+290    	; 0x1c76 <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    1b54:	69 89       	ldd	r22, Y+17	; 0x11
    1b56:	7a 89       	ldd	r23, Y+18	; 0x12
    1b58:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	4f e7       	ldi	r20, 0x7F	; 127
    1b62:	53 e4       	ldi	r21, 0x43	; 67
    1b64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b68:	18 16       	cp	r1, r24
    1b6a:	0c f0       	brlt	.+2      	; 0x1b6e <LCD_ES_tTrigger_Enable+0x20c>
    1b6c:	7b c0       	rjmp	.+246    	; 0x1c64 <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    1b6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b70:	7e 89       	ldd	r23, Y+22	; 0x16
    1b72:	8f 89       	ldd	r24, Y+23	; 0x17
    1b74:	98 8d       	ldd	r25, Y+24	; 0x18
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	4a e7       	ldi	r20, 0x7A	; 122
    1b7c:	54 e4       	ldi	r21, 0x44	; 68
    1b7e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	8c 87       	std	Y+12, r24	; 0x0c
    1b88:	9d 87       	std	Y+13, r25	; 0x0d
    1b8a:	ae 87       	std	Y+14, r26	; 0x0e
    1b8c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b90:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b92:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b94:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a e7       	ldi	r20, 0x7A	; 122
    1b9c:	55 e4       	ldi	r21, 0x45	; 69
    1b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	88 87       	std	Y+8, r24	; 0x08
    1ba8:	99 87       	std	Y+9, r25	; 0x09
    1baa:	aa 87       	std	Y+10, r26	; 0x0a
    1bac:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1bae:	68 85       	ldd	r22, Y+8	; 0x08
    1bb0:	79 85       	ldd	r23, Y+9	; 0x09
    1bb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bb4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9f 83       	std	Y+7, r25	; 0x07
    1bcc:	8e 83       	std	Y+6, r24	; 0x06
    1bce:	3f c0       	rjmp	.+126    	; 0x1c4e <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    1bd0:	68 85       	ldd	r22, Y+8	; 0x08
    1bd2:	79 85       	ldd	r23, Y+9	; 0x09
    1bd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bd6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	3f ef       	ldi	r19, 0xFF	; 255
    1bdc:	4f e7       	ldi	r20, 0x7F	; 127
    1bde:	57 e4       	ldi	r21, 0x47	; 71
    1be0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be4:	18 16       	cp	r1, r24
    1be6:	4c f5       	brge	.+82     	; 0x1c3a <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bea:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bec:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bee:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e2       	ldi	r20, 0x20	; 32
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9f 83       	std	Y+7, r25	; 0x07
    1c0e:	8e 83       	std	Y+6, r24	; 0x06
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <LCD_ES_tTrigger_Enable+0x2ce>
    1c12:	80 e9       	ldi	r24, 0x90	; 144
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	9d 83       	std	Y+5, r25	; 0x05
    1c18:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_ES_tTrigger_Enable+0x2bc>
    1c22:	9d 83       	std	Y+5, r25	; 0x05
    1c24:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	8e 81       	ldd	r24, Y+6	; 0x06
    1c28:	9f 81       	ldd	r25, Y+7	; 0x07
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	9f 83       	std	Y+7, r25	; 0x07
    1c2e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c30:	8e 81       	ldd	r24, Y+6	; 0x06
    1c32:	9f 81       	ldd	r25, Y+7	; 0x07
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <LCD_ES_tTrigger_Enable+0x2b0>
    1c38:	24 c0       	rjmp	.+72     	; 0x1c82 <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3a:	68 85       	ldd	r22, Y+8	; 0x08
    1c3c:	79 85       	ldd	r23, Y+9	; 0x09
    1c3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c40:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9f 83       	std	Y+7, r25	; 0x07
    1c4c:	8e 83       	std	Y+6, r24	; 0x06
    1c4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c50:	9f 81       	ldd	r25, Y+7	; 0x07
    1c52:	9b 83       	std	Y+3, r25	; 0x03
    1c54:	8a 83       	std	Y+2, r24	; 0x02
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_ES_tTrigger_Enable+0x2f8>
    1c5e:	9b 83       	std	Y+3, r25	; 0x03
    1c60:	8a 83       	std	Y+2, r24	; 0x02
    1c62:	0f c0       	rjmp	.+30     	; 0x1c82 <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c64:	69 89       	ldd	r22, Y+17	; 0x11
    1c66:	7a 89       	ldd	r23, Y+18	; 0x12
    1c68:	8b 89       	ldd	r24, Y+19	; 0x13
    1c6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	88 8b       	std	Y+16, r24	; 0x10
    1c76:	88 89       	ldd	r24, Y+16	; 0x10
    1c78:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	8a 95       	dec	r24
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <LCD_ES_tTrigger_Enable+0x31a>
    1c80:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    1c82:	80 e0       	ldi	r24, 0x00	; 0
}
    1c84:	e0 96       	adiw	r28, 0x30	; 48
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    1c9e:	82 e0       	ldi	r24, 0x02	; 2
    1ca0:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    1ca4:	88 e2       	ldi	r24, 0x28	; 40
    1ca6:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    1caa:	8e e0       	ldi	r24, 0x0E	; 14
    1cac:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    1cb0:	86 e0       	ldi	r24, 0x06	; 6
    1cb2:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Lcd_ES_tsendCmd>
	return ES_OK;
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	2e 97       	sbiw	r28, 0x0e	; 14
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	de bf       	out	0x3e, r29	; 62
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Lcd_ES_tsendCmd>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a0 e0       	ldi	r26, 0x00	; 0
    1ce4:	b0 e4       	ldi	r27, 0x40	; 64
    1ce6:	8b 87       	std	Y+11, r24	; 0x0b
    1ce8:	9c 87       	std	Y+12, r25	; 0x0c
    1cea:	ad 87       	std	Y+13, r26	; 0x0d
    1cec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	4a e7       	ldi	r20, 0x7A	; 122
    1cfc:	55 e4       	ldi	r21, 0x45	; 69
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	8f 83       	std	Y+7, r24	; 0x07
    1d08:	98 87       	std	Y+8, r25	; 0x08
    1d0a:	a9 87       	std	Y+9, r26	; 0x09
    1d0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	5f e3       	ldi	r21, 0x3F	; 63
    1d1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	2c f4       	brge	.+10     	; 0x1d30 <lcd_ES_tclear+0x6c>
		__ticks = 1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	3f c0       	rjmp	.+126    	; 0x1dae <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    1d30:	6f 81       	ldd	r22, Y+7	; 0x07
    1d32:	78 85       	ldd	r23, Y+8	; 0x08
    1d34:	89 85       	ldd	r24, Y+9	; 0x09
    1d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	3f ef       	ldi	r19, 0xFF	; 255
    1d3c:	4f e7       	ldi	r20, 0x7F	; 127
    1d3e:	57 e4       	ldi	r21, 0x47	; 71
    1d40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d44:	18 16       	cp	r1, r24
    1d46:	4c f5       	brge	.+82     	; 0x1d9a <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e2       	ldi	r20, 0x20	; 32
    1d56:	51 e4       	ldi	r21, 0x41	; 65
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <lcd_ES_tclear+0xcc>
    1d72:	80 e9       	ldi	r24, 0x90	; 144
    1d74:	91 e0       	ldi	r25, 0x01	; 1
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <lcd_ES_tclear+0xba>
    1d82:	9c 83       	std	Y+4, r25	; 0x04
    1d84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	69 f7       	brne	.-38     	; 0x1d72 <lcd_ES_tclear+0xae>
    1d98:	14 c0       	rjmp	.+40     	; 0x1dc2 <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9c:	78 85       	ldd	r23, Y+8	; 0x08
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9e 83       	std	Y+6, r25	; 0x06
    1dac:	8d 83       	std	Y+5, r24	; 0x05
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <lcd_ES_tclear+0xf6>
    1dbe:	9a 83       	std	Y+2, r25	; 0x02
    1dc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
}
    1dc4:	2e 96       	adiw	r28, 0x0e	; 14
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	0f 92       	push	r0
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	61 e0       	ldi	r22, 0x01	; 1
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	88 23       	and	r24, r24
    1dfa:	34 f4       	brge	.+12     	; 0x1e08 <Lcd_ES_tsendCmd+0x32>
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	66 e0       	ldi	r22, 0x06	; 6
    1e00:	41 e0       	ldi	r20, 0x01	; 1
    1e02:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1e06:	05 c0       	rjmp	.+10     	; 0x1e12 <Lcd_ES_tsendCmd+0x3c>
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	66 e0       	ldi	r22, 0x06	; 6
    1e0c:	40 e0       	ldi	r20, 0x00	; 0
    1e0e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	82 95       	swap	r24
    1e16:	86 95       	lsr	r24
    1e18:	86 95       	lsr	r24
    1e1a:	83 70       	andi	r24, 0x03	; 3
    1e1c:	88 2f       	mov	r24, r24
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	81 70       	andi	r24, 0x01	; 1
    1e22:	90 70       	andi	r25, 0x00	; 0
    1e24:	88 23       	and	r24, r24
    1e26:	31 f0       	breq	.+12     	; 0x1e34 <Lcd_ES_tsendCmd+0x5e>
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	65 e0       	ldi	r22, 0x05	; 5
    1e2c:	41 e0       	ldi	r20, 0x01	; 1
    1e2e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1e32:	05 c0       	rjmp	.+10     	; 0x1e3e <Lcd_ES_tsendCmd+0x68>
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	65 e0       	ldi	r22, 0x05	; 5
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	82 95       	swap	r24
    1e42:	86 95       	lsr	r24
    1e44:	87 70       	andi	r24, 0x07	; 7
    1e46:	88 2f       	mov	r24, r24
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	81 70       	andi	r24, 0x01	; 1
    1e4c:	90 70       	andi	r25, 0x00	; 0
    1e4e:	88 23       	and	r24, r24
    1e50:	31 f0       	breq	.+12     	; 0x1e5e <Lcd_ES_tsendCmd+0x88>
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	64 e0       	ldi	r22, 0x04	; 4
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1e5c:	05 c0       	rjmp	.+10     	; 0x1e68 <Lcd_ES_tsendCmd+0x92>
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	64 e0       	ldi	r22, 0x04	; 4
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	82 95       	swap	r24
    1e6c:	8f 70       	andi	r24, 0x0F	; 15
    1e6e:	88 2f       	mov	r24, r24
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	81 70       	andi	r24, 0x01	; 1
    1e74:	90 70       	andi	r25, 0x00	; 0
    1e76:	88 23       	and	r24, r24
    1e78:	31 f0       	breq	.+12     	; 0x1e86 <Lcd_ES_tsendCmd+0xb0>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	63 e0       	ldi	r22, 0x03	; 3
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1e84:	05 c0       	rjmp	.+10     	; 0x1e90 <Lcd_ES_tsendCmd+0xba>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	63 e0       	ldi	r22, 0x03	; 3
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    1e90:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	86 95       	lsr	r24
    1e98:	86 95       	lsr	r24
    1e9a:	86 95       	lsr	r24
    1e9c:	88 2f       	mov	r24, r24
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	81 70       	andi	r24, 0x01	; 1
    1ea2:	90 70       	andi	r25, 0x00	; 0
    1ea4:	88 23       	and	r24, r24
    1ea6:	31 f0       	breq	.+12     	; 0x1eb4 <Lcd_ES_tsendCmd+0xde>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	66 e0       	ldi	r22, 0x06	; 6
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1eb2:	05 c0       	rjmp	.+10     	; 0x1ebe <Lcd_ES_tsendCmd+0xe8>
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	66 e0       	ldi	r22, 0x06	; 6
    1eb8:	40 e0       	ldi	r20, 0x00	; 0
    1eba:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	86 95       	lsr	r24
    1ec2:	86 95       	lsr	r24
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	81 70       	andi	r24, 0x01	; 1
    1eca:	90 70       	andi	r25, 0x00	; 0
    1ecc:	88 23       	and	r24, r24
    1ece:	31 f0       	breq	.+12     	; 0x1edc <Lcd_ES_tsendCmd+0x106>
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	65 e0       	ldi	r22, 0x05	; 5
    1ed4:	41 e0       	ldi	r20, 0x01	; 1
    1ed6:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1eda:	05 c0       	rjmp	.+10     	; 0x1ee6 <Lcd_ES_tsendCmd+0x110>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	65 e0       	ldi	r22, 0x05	; 5
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	86 95       	lsr	r24
    1eea:	88 2f       	mov	r24, r24
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	81 70       	andi	r24, 0x01	; 1
    1ef0:	90 70       	andi	r25, 0x00	; 0
    1ef2:	88 23       	and	r24, r24
    1ef4:	31 f0       	breq	.+12     	; 0x1f02 <Lcd_ES_tsendCmd+0x12c>
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	64 e0       	ldi	r22, 0x04	; 4
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1f00:	05 c0       	rjmp	.+10     	; 0x1f0c <Lcd_ES_tsendCmd+0x136>
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	64 e0       	ldi	r22, 0x04	; 4
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	88 2f       	mov	r24, r24
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	81 70       	andi	r24, 0x01	; 1
    1f14:	90 70       	andi	r25, 0x00	; 0
    1f16:	88 23       	and	r24, r24
    1f18:	31 f0       	breq	.+12     	; 0x1f26 <Lcd_ES_tsendCmd+0x150>
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	63 e0       	ldi	r22, 0x03	; 3
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1f24:	05 c0       	rjmp	.+10     	; 0x1f30 <Lcd_ES_tsendCmd+0x15a>
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	63 e0       	ldi	r22, 0x03	; 3
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    1f30:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    1f34:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	0f 92       	push	r0
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	61 e0       	ldi	r22, 0x01	; 1
    1f4e:	41 e0       	ldi	r20, 0x01	; 1
    1f50:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	60 e0       	ldi	r22, 0x00	; 0
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	88 23       	and	r24, r24
    1f62:	34 f4       	brge	.+12     	; 0x1f70 <Lcd_ES_tsendChar+0x32>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	66 e0       	ldi	r22, 0x06	; 6
    1f68:	41 e0       	ldi	r20, 0x01	; 1
    1f6a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1f6e:	05 c0       	rjmp	.+10     	; 0x1f7a <Lcd_ES_tsendChar+0x3c>
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	66 e0       	ldi	r22, 0x06	; 6
    1f74:	40 e0       	ldi	r20, 0x00	; 0
    1f76:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	82 95       	swap	r24
    1f7e:	86 95       	lsr	r24
    1f80:	86 95       	lsr	r24
    1f82:	83 70       	andi	r24, 0x03	; 3
    1f84:	88 2f       	mov	r24, r24
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	81 70       	andi	r24, 0x01	; 1
    1f8a:	90 70       	andi	r25, 0x00	; 0
    1f8c:	88 23       	and	r24, r24
    1f8e:	31 f0       	breq	.+12     	; 0x1f9c <Lcd_ES_tsendChar+0x5e>
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	65 e0       	ldi	r22, 0x05	; 5
    1f94:	41 e0       	ldi	r20, 0x01	; 1
    1f96:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1f9a:	05 c0       	rjmp	.+10     	; 0x1fa6 <Lcd_ES_tsendChar+0x68>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	65 e0       	ldi	r22, 0x05	; 5
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	82 95       	swap	r24
    1faa:	86 95       	lsr	r24
    1fac:	87 70       	andi	r24, 0x07	; 7
    1fae:	88 2f       	mov	r24, r24
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	81 70       	andi	r24, 0x01	; 1
    1fb4:	90 70       	andi	r25, 0x00	; 0
    1fb6:	88 23       	and	r24, r24
    1fb8:	31 f0       	breq	.+12     	; 0x1fc6 <Lcd_ES_tsendChar+0x88>
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	64 e0       	ldi	r22, 0x04	; 4
    1fbe:	41 e0       	ldi	r20, 0x01	; 1
    1fc0:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1fc4:	05 c0       	rjmp	.+10     	; 0x1fd0 <Lcd_ES_tsendChar+0x92>
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	64 e0       	ldi	r22, 0x04	; 4
    1fca:	40 e0       	ldi	r20, 0x00	; 0
    1fcc:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	82 95       	swap	r24
    1fd4:	8f 70       	andi	r24, 0x0F	; 15
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	81 70       	andi	r24, 0x01	; 1
    1fdc:	90 70       	andi	r25, 0x00	; 0
    1fde:	88 23       	and	r24, r24
    1fe0:	31 f0       	breq	.+12     	; 0x1fee <Lcd_ES_tsendChar+0xb0>
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	63 e0       	ldi	r22, 0x03	; 3
    1fe6:	41 e0       	ldi	r20, 0x01	; 1
    1fe8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1fec:	05 c0       	rjmp	.+10     	; 0x1ff8 <Lcd_ES_tsendChar+0xba>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	63 e0       	ldi	r22, 0x03	; 3
    1ff2:	40 e0       	ldi	r20, 0x00	; 0
    1ff4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    1ff8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	86 95       	lsr	r24
    2000:	86 95       	lsr	r24
    2002:	86 95       	lsr	r24
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	81 70       	andi	r24, 0x01	; 1
    200a:	90 70       	andi	r25, 0x00	; 0
    200c:	88 23       	and	r24, r24
    200e:	31 f0       	breq	.+12     	; 0x201c <Lcd_ES_tsendChar+0xde>
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	66 e0       	ldi	r22, 0x06	; 6
    2014:	41 e0       	ldi	r20, 0x01	; 1
    2016:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    201a:	05 c0       	rjmp	.+10     	; 0x2026 <Lcd_ES_tsendChar+0xe8>
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	66 e0       	ldi	r22, 0x06	; 6
    2020:	40 e0       	ldi	r20, 0x00	; 0
    2022:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	86 95       	lsr	r24
    202a:	86 95       	lsr	r24
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	81 70       	andi	r24, 0x01	; 1
    2032:	90 70       	andi	r25, 0x00	; 0
    2034:	88 23       	and	r24, r24
    2036:	31 f0       	breq	.+12     	; 0x2044 <Lcd_ES_tsendChar+0x106>
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	65 e0       	ldi	r22, 0x05	; 5
    203c:	41 e0       	ldi	r20, 0x01	; 1
    203e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    2042:	05 c0       	rjmp	.+10     	; 0x204e <Lcd_ES_tsendChar+0x110>
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	65 e0       	ldi	r22, 0x05	; 5
    2048:	40 e0       	ldi	r20, 0x00	; 0
    204a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	86 95       	lsr	r24
    2052:	88 2f       	mov	r24, r24
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	81 70       	andi	r24, 0x01	; 1
    2058:	90 70       	andi	r25, 0x00	; 0
    205a:	88 23       	and	r24, r24
    205c:	31 f0       	breq	.+12     	; 0x206a <Lcd_ES_tsendChar+0x12c>
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	64 e0       	ldi	r22, 0x04	; 4
    2062:	41 e0       	ldi	r20, 0x01	; 1
    2064:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    2068:	05 c0       	rjmp	.+10     	; 0x2074 <Lcd_ES_tsendChar+0x136>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	64 e0       	ldi	r22, 0x04	; 4
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	88 2f       	mov	r24, r24
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	81 70       	andi	r24, 0x01	; 1
    207c:	90 70       	andi	r25, 0x00	; 0
    207e:	88 23       	and	r24, r24
    2080:	31 f0       	breq	.+12     	; 0x208e <Lcd_ES_tsendChar+0x150>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	63 e0       	ldi	r22, 0x03	; 3
    2086:	41 e0       	ldi	r20, 0x01	; 1
    2088:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    208c:	05 c0       	rjmp	.+10     	; 0x2098 <Lcd_ES_tsendChar+0x15a>
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	63 e0       	ldi	r22, 0x03	; 3
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2098:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    209c:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    209e:	0f 90       	pop	r0
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	00 d0       	rcall	.+0      	; 0x20ac <Lcd_ES_tsendString+0x6>
    20ac:	0f 92       	push	r0
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	9b 83       	std	Y+3, r25	; 0x03
    20b4:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	61 e0       	ldi	r22, 0x01	; 1
    20ba:	41 e0       	ldi	r20, 0x01	; 1
    20bc:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	60 e0       	ldi	r22, 0x00	; 0
    20c4:	40 e0       	ldi	r20, 0x00	; 0
    20c6:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>

	unsigned char i=0;
    20ca:	19 82       	std	Y+1, r1	; 0x01
    20cc:	0e c0       	rjmp	.+28     	; 0x20ea <Lcd_ES_tsendString+0x44>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	9b 81       	ldd	r25, Y+3	; 0x03
    20d8:	fc 01       	movw	r30, r24
    20da:	e2 0f       	add	r30, r18
    20dc:	f3 1f       	adc	r31, r19
    20de:	80 81       	ld	r24, Z
    20e0:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <Lcd_ES_tsendChar>
		i++;
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	8f 5f       	subi	r24, 0xFF	; 255
    20e8:	89 83       	std	Y+1, r24	; 0x01
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);

	unsigned char i=0;
	while(data[i]!=0)
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	9b 81       	ldd	r25, Y+3	; 0x03
    20f4:	fc 01       	movw	r30, r24
    20f6:	e2 0f       	add	r30, r18
    20f8:	f3 1f       	adc	r31, r19
    20fa:	80 81       	ld	r24, Z
    20fc:	88 23       	and	r24, r24
    20fe:	39 f7       	brne	.-50     	; 0x20ce <Lcd_ES_tsendString+0x28>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    2100:	80 e0       	ldi	r24, 0x00	; 0
}
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	00 d0       	rcall	.+0      	; 0x2114 <Lcd_ES_tsendString_xy+0x6>
    2114:	00 d0       	rcall	.+0      	; 0x2116 <Lcd_ES_tsendString_xy+0x8>
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	9a 83       	std	Y+2, r25	; 0x02
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	6b 83       	std	Y+3, r22	; 0x03
    2120:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	61 e0       	ldi	r22, 0x01	; 1
    2126:	41 e0       	ldi	r20, 0x01	; 1
    2128:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	60 e0       	ldi	r22, 0x00	; 0
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>

	LCD_ES_tSet_Cursor_Pos(row,col);
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	6c 81       	ldd	r22, Y+4	; 0x04
    213a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	0e 94 53 10 	call	0x20a6	; 0x20a6 <Lcd_ES_tsendString>
	return ES_OK;
    2146:	80 e0       	ldi	r24, 0x00	; 0

}
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 num)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	2e 97       	sbiw	r28, 0x0e	; 14
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	9e 87       	std	Y+14, r25	; 0x0e
    216c:	8d 87       	std	Y+13, r24	; 0x0d
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	61 e0       	ldi	r22, 0x01	; 1
    2172:	41 e0       	ldi	r20, 0x01	; 1
    2174:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>

	uint8_t ch[10],i=0,j=0;
    2182:	1a 82       	std	Y+2, r1	; 0x02
    2184:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    2186:	8d 85       	ldd	r24, Y+13	; 0x0d
    2188:	9e 85       	ldd	r25, Y+14	; 0x0e
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	11 f5       	brne	.+68     	; 0x21d2 <Lcd_ES_tdisplayNum+0x7c>
	{
		Lcd_ES_tsendChar('0');
    218e:	80 e3       	ldi	r24, 0x30	; 48
    2190:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <Lcd_ES_tsendChar>
    2194:	39 c0       	rjmp	.+114    	; 0x2208 <Lcd_ES_tdisplayNum+0xb2>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	e8 2f       	mov	r30, r24
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	8d 85       	ldd	r24, Y+13	; 0x0d
    219e:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a0:	2a e0       	ldi	r18, 0x0A	; 10
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	b9 01       	movw	r22, r18
    21a6:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__udivmodhi4>
    21aa:	28 2f       	mov	r18, r24
    21ac:	20 5d       	subi	r18, 0xD0	; 208
    21ae:	ce 01       	movw	r24, r28
    21b0:	03 96       	adiw	r24, 0x03	; 3
    21b2:	e8 0f       	add	r30, r24
    21b4:	f9 1f       	adc	r31, r25
    21b6:	20 83       	st	Z, r18
			num /= 10;
    21b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    21bc:	2a e0       	ldi	r18, 0x0A	; 10
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	b9 01       	movw	r22, r18
    21c2:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__udivmodhi4>
    21c6:	cb 01       	movw	r24, r22
    21c8:	9e 87       	std	Y+14, r25	; 0x0e
    21ca:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	8f 5f       	subi	r24, 0xFF	; 255
    21d0:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    21d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	f1 f6       	brne	.-68     	; 0x2196 <Lcd_ES_tdisplayNum+0x40>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	11 c0       	rjmp	.+34     	; 0x2202 <Lcd_ES_tdisplayNum+0xac>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	88 2f       	mov	r24, r24
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	9c 01       	movw	r18, r24
    21e8:	21 50       	subi	r18, 0x01	; 1
    21ea:	30 40       	sbci	r19, 0x00	; 0
    21ec:	ce 01       	movw	r24, r28
    21ee:	03 96       	adiw	r24, 0x03	; 3
    21f0:	fc 01       	movw	r30, r24
    21f2:	e2 0f       	add	r30, r18
    21f4:	f3 1f       	adc	r31, r19
    21f6:	80 81       	ld	r24, Z
    21f8:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	81 50       	subi	r24, 0x01	; 1
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	88 23       	and	r24, r24
    2206:	61 f7       	brne	.-40     	; 0x21e0 <Lcd_ES_tdisplayNum+0x8a>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    2208:	80 e0       	ldi	r24, 0x00	; 0
}
    220a:	2e 96       	adiw	r28, 0x0e	; 14
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u16 num,u8 row,u8 col){
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
    2224:	a3 97       	sbiw	r28, 0x23	; 35
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	98 a3       	std	Y+32, r25	; 0x20
    2232:	8f 8f       	std	Y+31, r24	; 0x1f
    2234:	69 a3       	std	Y+33, r22	; 0x21
    2236:	4a a3       	std	Y+34, r20	; 0x22

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	61 e0       	ldi	r22, 0x01	; 1
    223c:	41 e0       	ldi	r20, 0x01	; 1
    223e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	60 e0       	ldi	r22, 0x00	; 0
    2246:	40 e0       	ldi	r20, 0x00	; 0
    2248:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>


	if(row == 1){
    224c:	89 a1       	ldd	r24, Y+33	; 0x21
    224e:	81 30       	cpi	r24, 0x01	; 1
    2250:	09 f0       	breq	.+2      	; 0x2254 <Lcd_ES_tdisplayNum_xy+0x38>
    2252:	76 c0       	rjmp	.+236    	; 0x2340 <Lcd_ES_tdisplayNum_xy+0x124>
		Lcd_ES_tsendCmd(Force1stline);
    2254:	80 e8       	ldi	r24, 0x80	; 128
    2256:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Lcd_ES_tsendCmd>
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	a0 e8       	ldi	r26, 0x80	; 128
    2260:	bf e3       	ldi	r27, 0x3F	; 63
    2262:	89 8f       	std	Y+25, r24	; 0x19
    2264:	9a 8f       	std	Y+26, r25	; 0x1a
    2266:	ab 8f       	std	Y+27, r26	; 0x1b
    2268:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226a:	69 8d       	ldd	r22, Y+25	; 0x19
    226c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    226e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2270:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	4a e7       	ldi	r20, 0x7A	; 122
    2278:	55 e4       	ldi	r21, 0x45	; 69
    227a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	8d 8b       	std	Y+21, r24	; 0x15
    2284:	9e 8b       	std	Y+22, r25	; 0x16
    2286:	af 8b       	std	Y+23, r26	; 0x17
    2288:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    228a:	6d 89       	ldd	r22, Y+21	; 0x15
    228c:	7e 89       	ldd	r23, Y+22	; 0x16
    228e:	8f 89       	ldd	r24, Y+23	; 0x17
    2290:	98 8d       	ldd	r25, Y+24	; 0x18
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e8       	ldi	r20, 0x80	; 128
    2298:	5f e3       	ldi	r21, 0x3F	; 63
    229a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    229e:	88 23       	and	r24, r24
    22a0:	2c f4       	brge	.+10     	; 0x22ac <Lcd_ES_tdisplayNum_xy+0x90>
		__ticks = 1;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	9c 8b       	std	Y+20, r25	; 0x14
    22a8:	8b 8b       	std	Y+19, r24	; 0x13
    22aa:	3f c0       	rjmp	.+126    	; 0x232a <Lcd_ES_tdisplayNum_xy+0x10e>
	else if (__tmp > 65535)
    22ac:	6d 89       	ldd	r22, Y+21	; 0x15
    22ae:	7e 89       	ldd	r23, Y+22	; 0x16
    22b0:	8f 89       	ldd	r24, Y+23	; 0x17
    22b2:	98 8d       	ldd	r25, Y+24	; 0x18
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	3f ef       	ldi	r19, 0xFF	; 255
    22b8:	4f e7       	ldi	r20, 0x7F	; 127
    22ba:	57 e4       	ldi	r21, 0x47	; 71
    22bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22c0:	18 16       	cp	r1, r24
    22c2:	4c f5       	brge	.+82     	; 0x2316 <Lcd_ES_tdisplayNum_xy+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c4:	69 8d       	ldd	r22, Y+25	; 0x19
    22c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e2       	ldi	r20, 0x20	; 32
    22d2:	51 e4       	ldi	r21, 0x41	; 65
    22d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9c 8b       	std	Y+20, r25	; 0x14
    22ea:	8b 8b       	std	Y+19, r24	; 0x13
    22ec:	0f c0       	rjmp	.+30     	; 0x230c <Lcd_ES_tdisplayNum_xy+0xf0>
    22ee:	80 e9       	ldi	r24, 0x90	; 144
    22f0:	91 e0       	ldi	r25, 0x01	; 1
    22f2:	9a 8b       	std	Y+18, r25	; 0x12
    22f4:	89 8b       	std	Y+17, r24	; 0x11
    22f6:	89 89       	ldd	r24, Y+17	; 0x11
    22f8:	9a 89       	ldd	r25, Y+18	; 0x12
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <Lcd_ES_tdisplayNum_xy+0xde>
    22fe:	9a 8b       	std	Y+18, r25	; 0x12
    2300:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2302:	8b 89       	ldd	r24, Y+19	; 0x13
    2304:	9c 89       	ldd	r25, Y+20	; 0x14
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	9c 8b       	std	Y+20, r25	; 0x14
    230a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230c:	8b 89       	ldd	r24, Y+19	; 0x13
    230e:	9c 89       	ldd	r25, Y+20	; 0x14
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	69 f7       	brne	.-38     	; 0x22ee <Lcd_ES_tdisplayNum_xy+0xd2>
    2314:	92 c0       	rjmp	.+292    	; 0x243a <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2316:	6d 89       	ldd	r22, Y+21	; 0x15
    2318:	7e 89       	ldd	r23, Y+22	; 0x16
    231a:	8f 89       	ldd	r24, Y+23	; 0x17
    231c:	98 8d       	ldd	r25, Y+24	; 0x18
    231e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9c 8b       	std	Y+20, r25	; 0x14
    2328:	8b 8b       	std	Y+19, r24	; 0x13
    232a:	8b 89       	ldd	r24, Y+19	; 0x13
    232c:	9c 89       	ldd	r25, Y+20	; 0x14
    232e:	98 8b       	std	Y+16, r25	; 0x10
    2330:	8f 87       	std	Y+15, r24	; 0x0f
    2332:	8f 85       	ldd	r24, Y+15	; 0x0f
    2334:	98 89       	ldd	r25, Y+16	; 0x10
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <Lcd_ES_tdisplayNum_xy+0x11a>
    233a:	98 8b       	std	Y+16, r25	; 0x10
    233c:	8f 87       	std	Y+15, r24	; 0x0f
    233e:	7d c0       	rjmp	.+250    	; 0x243a <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(1);
	}else if(row == 2){
    2340:	89 a1       	ldd	r24, Y+33	; 0x21
    2342:	82 30       	cpi	r24, 0x02	; 2
    2344:	09 f0       	breq	.+2      	; 0x2348 <Lcd_ES_tdisplayNum_xy+0x12c>
    2346:	76 c0       	rjmp	.+236    	; 0x2434 <Lcd_ES_tdisplayNum_xy+0x218>
		Lcd_ES_tsendCmd(Force2ndline);
    2348:	80 ec       	ldi	r24, 0xC0	; 192
    234a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Lcd_ES_tsendCmd>
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	a0 e2       	ldi	r26, 0x20	; 32
    2354:	b1 e4       	ldi	r27, 0x41	; 65
    2356:	8b 87       	std	Y+11, r24	; 0x0b
    2358:	9c 87       	std	Y+12, r25	; 0x0c
    235a:	ad 87       	std	Y+13, r26	; 0x0d
    235c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2360:	7c 85       	ldd	r23, Y+12	; 0x0c
    2362:	8d 85       	ldd	r24, Y+13	; 0x0d
    2364:	9e 85       	ldd	r25, Y+14	; 0x0e
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	4a e7       	ldi	r20, 0x7A	; 122
    236c:	55 e4       	ldi	r21, 0x45	; 69
    236e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	8f 83       	std	Y+7, r24	; 0x07
    2378:	98 87       	std	Y+8, r25	; 0x08
    237a:	a9 87       	std	Y+9, r26	; 0x09
    237c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    237e:	6f 81       	ldd	r22, Y+7	; 0x07
    2380:	78 85       	ldd	r23, Y+8	; 0x08
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e8       	ldi	r20, 0x80	; 128
    238c:	5f e3       	ldi	r21, 0x3F	; 63
    238e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2392:	88 23       	and	r24, r24
    2394:	2c f4       	brge	.+10     	; 0x23a0 <Lcd_ES_tdisplayNum_xy+0x184>
		__ticks = 1;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
    239e:	3f c0       	rjmp	.+126    	; 0x241e <Lcd_ES_tdisplayNum_xy+0x202>
	else if (__tmp > 65535)
    23a0:	6f 81       	ldd	r22, Y+7	; 0x07
    23a2:	78 85       	ldd	r23, Y+8	; 0x08
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	3f ef       	ldi	r19, 0xFF	; 255
    23ac:	4f e7       	ldi	r20, 0x7F	; 127
    23ae:	57 e4       	ldi	r21, 0x47	; 71
    23b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23b4:	18 16       	cp	r1, r24
    23b6:	4c f5       	brge	.+82     	; 0x240a <Lcd_ES_tdisplayNum_xy+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    23bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23be:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e2       	ldi	r20, 0x20	; 32
    23c6:	51 e4       	ldi	r21, 0x41	; 65
    23c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	bc 01       	movw	r22, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9e 83       	std	Y+6, r25	; 0x06
    23de:	8d 83       	std	Y+5, r24	; 0x05
    23e0:	0f c0       	rjmp	.+30     	; 0x2400 <Lcd_ES_tdisplayNum_xy+0x1e4>
    23e2:	80 e9       	ldi	r24, 0x90	; 144
    23e4:	91 e0       	ldi	r25, 0x01	; 1
    23e6:	9c 83       	std	Y+4, r25	; 0x04
    23e8:	8b 83       	std	Y+3, r24	; 0x03
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <Lcd_ES_tdisplayNum_xy+0x1d2>
    23f2:	9c 83       	std	Y+4, r25	; 0x04
    23f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f6:	8d 81       	ldd	r24, Y+5	; 0x05
    23f8:	9e 81       	ldd	r25, Y+6	; 0x06
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	69 f7       	brne	.-38     	; 0x23e2 <Lcd_ES_tdisplayNum_xy+0x1c6>
    2408:	18 c0       	rjmp	.+48     	; 0x243a <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240a:	6f 81       	ldd	r22, Y+7	; 0x07
    240c:	78 85       	ldd	r23, Y+8	; 0x08
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	9a 85       	ldd	r25, Y+10	; 0x0a
    2412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	9a 83       	std	Y+2, r25	; 0x02
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	9a 81       	ldd	r25, Y+2	; 0x02
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <Lcd_ES_tdisplayNum_xy+0x20e>
    242e:	9a 83       	std	Y+2, r25	; 0x02
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	03 c0       	rjmp	.+6      	; 0x243a <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	8b a3       	std	Y+35, r24	; 0x23
    2438:	1a c0       	rjmp	.+52     	; 0x246e <Lcd_ES_tdisplayNum_xy+0x252>
	}


	for(int j=1;j<=col;j++){
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9e 8f       	std	Y+30, r25	; 0x1e
    2440:	8d 8f       	std	Y+29, r24	; 0x1d
    2442:	08 c0       	rjmp	.+16     	; 0x2454 <Lcd_ES_tdisplayNum_xy+0x238>
		Lcd_ES_tsendCmd(ShiftRight);
    2444:	8c e1       	ldi	r24, 0x1C	; 28
    2446:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    244a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    244c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    244e:	01 96       	adiw	r24, 0x01	; 1
    2450:	9e 8f       	std	Y+30, r25	; 0x1e
    2452:	8d 8f       	std	Y+29, r24	; 0x1d
    2454:	8a a1       	ldd	r24, Y+34	; 0x22
    2456:	28 2f       	mov	r18, r24
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    245c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    245e:	28 17       	cp	r18, r24
    2460:	39 07       	cpc	r19, r25
    2462:	84 f7       	brge	.-32     	; 0x2444 <Lcd_ES_tdisplayNum_xy+0x228>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    2464:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2466:	98 a1       	ldd	r25, Y+32	; 0x20
    2468:	0e 94 ab 10 	call	0x2156	; 0x2156 <Lcd_ES_tdisplayNum>
	return ES_OK;
    246c:	1b a2       	std	Y+35, r1	; 0x23
    246e:	8b a1       	ldd	r24, Y+35	; 0x23

}
    2470:	a3 96       	adiw	r28, 0x23	; 35
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	08 95       	ret

00002482 <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	a2 97       	sbiw	r28, 0x22	; 34
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	8f 8f       	std	Y+31, r24	; 0x1f
    2498:	68 a3       	std	Y+32, r22	; 0x20
    249a:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	61 e0       	ldi	r22, 0x01	; 1
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	60 e0       	ldi	r22, 0x00	; 0
    24aa:	40 e0       	ldi	r20, 0x00	; 0
    24ac:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>


	if(row == 1){
    24b0:	88 a1       	ldd	r24, Y+32	; 0x20
    24b2:	81 30       	cpi	r24, 0x01	; 1
    24b4:	09 f0       	breq	.+2      	; 0x24b8 <Lcd_ES_tsendChar_xy+0x36>
    24b6:	76 c0       	rjmp	.+236    	; 0x25a4 <Lcd_ES_tsendChar_xy+0x122>
		Lcd_ES_tsendCmd(Force1stline);
    24b8:	80 e8       	ldi	r24, 0x80	; 128
    24ba:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Lcd_ES_tsendCmd>
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	a0 e8       	ldi	r26, 0x80	; 128
    24c4:	bf e3       	ldi	r27, 0x3F	; 63
    24c6:	89 8f       	std	Y+25, r24	; 0x19
    24c8:	9a 8f       	std	Y+26, r25	; 0x1a
    24ca:	ab 8f       	std	Y+27, r26	; 0x1b
    24cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ce:	69 8d       	ldd	r22, Y+25	; 0x19
    24d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	4a e7       	ldi	r20, 0x7A	; 122
    24dc:	55 e4       	ldi	r21, 0x45	; 69
    24de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	8d 8b       	std	Y+21, r24	; 0x15
    24e8:	9e 8b       	std	Y+22, r25	; 0x16
    24ea:	af 8b       	std	Y+23, r26	; 0x17
    24ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24ee:	6d 89       	ldd	r22, Y+21	; 0x15
    24f0:	7e 89       	ldd	r23, Y+22	; 0x16
    24f2:	8f 89       	ldd	r24, Y+23	; 0x17
    24f4:	98 8d       	ldd	r25, Y+24	; 0x18
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e8       	ldi	r20, 0x80	; 128
    24fc:	5f e3       	ldi	r21, 0x3F	; 63
    24fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2502:	88 23       	and	r24, r24
    2504:	2c f4       	brge	.+10     	; 0x2510 <Lcd_ES_tsendChar_xy+0x8e>
		__ticks = 1;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	9c 8b       	std	Y+20, r25	; 0x14
    250c:	8b 8b       	std	Y+19, r24	; 0x13
    250e:	3f c0       	rjmp	.+126    	; 0x258e <Lcd_ES_tsendChar_xy+0x10c>
	else if (__tmp > 65535)
    2510:	6d 89       	ldd	r22, Y+21	; 0x15
    2512:	7e 89       	ldd	r23, Y+22	; 0x16
    2514:	8f 89       	ldd	r24, Y+23	; 0x17
    2516:	98 8d       	ldd	r25, Y+24	; 0x18
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	3f ef       	ldi	r19, 0xFF	; 255
    251c:	4f e7       	ldi	r20, 0x7F	; 127
    251e:	57 e4       	ldi	r21, 0x47	; 71
    2520:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2524:	18 16       	cp	r1, r24
    2526:	4c f5       	brge	.+82     	; 0x257a <Lcd_ES_tsendChar_xy+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2528:	69 8d       	ldd	r22, Y+25	; 0x19
    252a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    252c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    252e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e2       	ldi	r20, 0x20	; 32
    2536:	51 e4       	ldi	r21, 0x41	; 65
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	bc 01       	movw	r22, r24
    2542:	cd 01       	movw	r24, r26
    2544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9c 8b       	std	Y+20, r25	; 0x14
    254e:	8b 8b       	std	Y+19, r24	; 0x13
    2550:	0f c0       	rjmp	.+30     	; 0x2570 <Lcd_ES_tsendChar_xy+0xee>
    2552:	80 e9       	ldi	r24, 0x90	; 144
    2554:	91 e0       	ldi	r25, 0x01	; 1
    2556:	9a 8b       	std	Y+18, r25	; 0x12
    2558:	89 8b       	std	Y+17, r24	; 0x11
    255a:	89 89       	ldd	r24, Y+17	; 0x11
    255c:	9a 89       	ldd	r25, Y+18	; 0x12
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <Lcd_ES_tsendChar_xy+0xdc>
    2562:	9a 8b       	std	Y+18, r25	; 0x12
    2564:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2566:	8b 89       	ldd	r24, Y+19	; 0x13
    2568:	9c 89       	ldd	r25, Y+20	; 0x14
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	9c 8b       	std	Y+20, r25	; 0x14
    256e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2570:	8b 89       	ldd	r24, Y+19	; 0x13
    2572:	9c 89       	ldd	r25, Y+20	; 0x14
    2574:	00 97       	sbiw	r24, 0x00	; 0
    2576:	69 f7       	brne	.-38     	; 0x2552 <Lcd_ES_tsendChar_xy+0xd0>
    2578:	92 c0       	rjmp	.+292    	; 0x269e <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257a:	6d 89       	ldd	r22, Y+21	; 0x15
    257c:	7e 89       	ldd	r23, Y+22	; 0x16
    257e:	8f 89       	ldd	r24, Y+23	; 0x17
    2580:	98 8d       	ldd	r25, Y+24	; 0x18
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	9c 8b       	std	Y+20, r25	; 0x14
    258c:	8b 8b       	std	Y+19, r24	; 0x13
    258e:	8b 89       	ldd	r24, Y+19	; 0x13
    2590:	9c 89       	ldd	r25, Y+20	; 0x14
    2592:	98 8b       	std	Y+16, r25	; 0x10
    2594:	8f 87       	std	Y+15, r24	; 0x0f
    2596:	8f 85       	ldd	r24, Y+15	; 0x0f
    2598:	98 89       	ldd	r25, Y+16	; 0x10
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <Lcd_ES_tsendChar_xy+0x118>
    259e:	98 8b       	std	Y+16, r25	; 0x10
    25a0:	8f 87       	std	Y+15, r24	; 0x0f
    25a2:	7d c0       	rjmp	.+250    	; 0x269e <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(1);
	}else if(row == 2){
    25a4:	88 a1       	ldd	r24, Y+32	; 0x20
    25a6:	82 30       	cpi	r24, 0x02	; 2
    25a8:	09 f0       	breq	.+2      	; 0x25ac <Lcd_ES_tsendChar_xy+0x12a>
    25aa:	76 c0       	rjmp	.+236    	; 0x2698 <Lcd_ES_tsendChar_xy+0x216>
		Lcd_ES_tsendCmd(Force2ndline);
    25ac:	80 ec       	ldi	r24, 0xC0	; 192
    25ae:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Lcd_ES_tsendCmd>
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	a0 e2       	ldi	r26, 0x20	; 32
    25b8:	b1 e4       	ldi	r27, 0x41	; 65
    25ba:	8b 87       	std	Y+11, r24	; 0x0b
    25bc:	9c 87       	std	Y+12, r25	; 0x0c
    25be:	ad 87       	std	Y+13, r26	; 0x0d
    25c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	4a e7       	ldi	r20, 0x7A	; 122
    25d0:	55 e4       	ldi	r21, 0x45	; 69
    25d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	8f 83       	std	Y+7, r24	; 0x07
    25dc:	98 87       	std	Y+8, r25	; 0x08
    25de:	a9 87       	std	Y+9, r26	; 0x09
    25e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25e2:	6f 81       	ldd	r22, Y+7	; 0x07
    25e4:	78 85       	ldd	r23, Y+8	; 0x08
    25e6:	89 85       	ldd	r24, Y+9	; 0x09
    25e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e8       	ldi	r20, 0x80	; 128
    25f0:	5f e3       	ldi	r21, 0x3F	; 63
    25f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25f6:	88 23       	and	r24, r24
    25f8:	2c f4       	brge	.+10     	; 0x2604 <Lcd_ES_tsendChar_xy+0x182>
		__ticks = 1;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	9e 83       	std	Y+6, r25	; 0x06
    2600:	8d 83       	std	Y+5, r24	; 0x05
    2602:	3f c0       	rjmp	.+126    	; 0x2682 <Lcd_ES_tsendChar_xy+0x200>
	else if (__tmp > 65535)
    2604:	6f 81       	ldd	r22, Y+7	; 0x07
    2606:	78 85       	ldd	r23, Y+8	; 0x08
    2608:	89 85       	ldd	r24, Y+9	; 0x09
    260a:	9a 85       	ldd	r25, Y+10	; 0x0a
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	3f ef       	ldi	r19, 0xFF	; 255
    2610:	4f e7       	ldi	r20, 0x7F	; 127
    2612:	57 e4       	ldi	r21, 0x47	; 71
    2614:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2618:	18 16       	cp	r1, r24
    261a:	4c f5       	brge	.+82     	; 0x266e <Lcd_ES_tsendChar_xy+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261c:	6b 85       	ldd	r22, Y+11	; 0x0b
    261e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2620:	8d 85       	ldd	r24, Y+13	; 0x0d
    2622:	9e 85       	ldd	r25, Y+14	; 0x0e
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e2       	ldi	r20, 0x20	; 32
    262a:	51 e4       	ldi	r21, 0x41	; 65
    262c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	bc 01       	movw	r22, r24
    2636:	cd 01       	movw	r24, r26
    2638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
    2644:	0f c0       	rjmp	.+30     	; 0x2664 <Lcd_ES_tsendChar_xy+0x1e2>
    2646:	80 e9       	ldi	r24, 0x90	; 144
    2648:	91 e0       	ldi	r25, 0x01	; 1
    264a:	9c 83       	std	Y+4, r25	; 0x04
    264c:	8b 83       	std	Y+3, r24	; 0x03
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <Lcd_ES_tsendChar_xy+0x1d0>
    2656:	9c 83       	std	Y+4, r25	; 0x04
    2658:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265a:	8d 81       	ldd	r24, Y+5	; 0x05
    265c:	9e 81       	ldd	r25, Y+6	; 0x06
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	9e 83       	std	Y+6, r25	; 0x06
    2662:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2664:	8d 81       	ldd	r24, Y+5	; 0x05
    2666:	9e 81       	ldd	r25, Y+6	; 0x06
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	69 f7       	brne	.-38     	; 0x2646 <Lcd_ES_tsendChar_xy+0x1c4>
    266c:	18 c0       	rjmp	.+48     	; 0x269e <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266e:	6f 81       	ldd	r22, Y+7	; 0x07
    2670:	78 85       	ldd	r23, Y+8	; 0x08
    2672:	89 85       	ldd	r24, Y+9	; 0x09
    2674:	9a 85       	ldd	r25, Y+10	; 0x0a
    2676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	9a 83       	std	Y+2, r25	; 0x02
    2688:	89 83       	std	Y+1, r24	; 0x01
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <Lcd_ES_tsendChar_xy+0x20c>
    2692:	9a 83       	std	Y+2, r25	; 0x02
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	03 c0       	rjmp	.+6      	; 0x269e <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	8a a3       	std	Y+34, r24	; 0x22
    269c:	19 c0       	rjmp	.+50     	; 0x26d0 <Lcd_ES_tsendChar_xy+0x24e>
	}

	for(int j=1;j<=col;j++){
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	9e 8f       	std	Y+30, r25	; 0x1e
    26a4:	8d 8f       	std	Y+29, r24	; 0x1d
    26a6:	08 c0       	rjmp	.+16     	; 0x26b8 <Lcd_ES_tsendChar_xy+0x236>
		Lcd_ES_tsendCmd(ShiftRight);
    26a8:	8c e1       	ldi	r24, 0x1C	; 28
    26aa:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    26ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26b2:	01 96       	adiw	r24, 0x01	; 1
    26b4:	9e 8f       	std	Y+30, r25	; 0x1e
    26b6:	8d 8f       	std	Y+29, r24	; 0x1d
    26b8:	89 a1       	ldd	r24, Y+33	; 0x21
    26ba:	28 2f       	mov	r18, r24
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26c2:	28 17       	cp	r18, r24
    26c4:	39 07       	cpc	r19, r25
    26c6:	84 f7       	brge	.-32     	; 0x26a8 <Lcd_ES_tsendChar_xy+0x226>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    26c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26ca:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <Lcd_ES_tsendChar>
	return ES_OK;
    26ce:	1a a2       	std	Y+34, r1	; 0x22
    26d0:	8a a1       	ldd	r24, Y+34	; 0x22
}
    26d2:	a2 96       	adiw	r28, 0x22	; 34
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <LCD_ES_tSet_Cursor_Pos+0x6>
    26ea:	00 d0       	rcall	.+0      	; 0x26ec <LCD_ES_tSet_Cursor_Pos+0x8>
    26ec:	0f 92       	push	r0
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	89 83       	std	Y+1, r24	; 0x01
    26f4:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    26f6:	8a 81       	ldd	r24, Y+2	; 0x02
    26f8:	81 50       	subi	r24, 0x01	; 1
    26fa:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	28 2f       	mov	r18, r24
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	3d 83       	std	Y+5, r19	; 0x05
    2704:	2c 83       	std	Y+4, r18	; 0x04
    2706:	8c 81       	ldd	r24, Y+4	; 0x04
    2708:	9d 81       	ldd	r25, Y+5	; 0x05
    270a:	81 30       	cpi	r24, 0x01	; 1
    270c:	91 05       	cpc	r25, r1
    270e:	31 f0       	breq	.+12     	; 0x271c <LCD_ES_tSet_Cursor_Pos+0x38>
    2710:	2c 81       	ldd	r18, Y+4	; 0x04
    2712:	3d 81       	ldd	r19, Y+5	; 0x05
    2714:	22 30       	cpi	r18, 0x02	; 2
    2716:	31 05       	cpc	r19, r1
    2718:	31 f0       	breq	.+12     	; 0x2726 <LCD_ES_tSet_Cursor_Pos+0x42>
    271a:	0a c0       	rjmp	.+20     	; 0x2730 <LCD_ES_tSet_Cursor_Pos+0x4c>
	         case 1:
	        	 Lcd_ES_tsendCmd((0x80 + column));
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	80 58       	subi	r24, 0x80	; 128
    2720:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Lcd_ES_tsendCmd>
    2724:	08 c0       	rjmp	.+16     	; 0x2736 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         case 2:
	        	 Lcd_ES_tsendCmd((0xc0 + column));
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	80 54       	subi	r24, 0x40	; 64
    272a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Lcd_ES_tsendCmd>
    272e:	03 c0       	rjmp	.+6      	; 0x2736 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         default:
	        	 return ES_NOT_OK;
    2730:	31 e0       	ldi	r19, 0x01	; 1
    2732:	3b 83       	std	Y+3, r19	; 0x03
    2734:	01 c0       	rjmp	.+2      	; 0x2738 <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    2736:	1b 82       	std	Y+3, r1	; 0x03
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
}
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret

0000274a <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	00 d0       	rcall	.+0      	; 0x2750 <LCD_ES_tGoTo+0x6>
    2750:	0f 92       	push	r0
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
    2756:	89 83       	std	Y+1, r24	; 0x01
    2758:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	88 23       	and	r24, r24
    275e:	41 f4       	brne	.+16     	; 0x2770 <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    2760:	8a 81       	ldd	r24, Y+2	; 0x02
    2762:	80 31       	cpi	r24, 0x10	; 16
    2764:	98 f4       	brcc	.+38     	; 0x278c <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	80 58       	subi	r24, 0x80	; 128
    276a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Lcd_ES_tsendCmd>
    276e:	0e c0       	rjmp	.+28     	; 0x278c <LCD_ES_tGoTo+0x42>
		}
	}
	else if (1 == Line)
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	81 30       	cpi	r24, 0x01	; 1
    2774:	41 f4       	brne	.+16     	; 0x2786 <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    2776:	8a 81       	ldd	r24, Y+2	; 0x02
    2778:	80 31       	cpi	r24, 0x10	; 16
    277a:	40 f4       	brcc	.+16     	; 0x278c <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	80 54       	subi	r24, 0x40	; 64
    2780:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Lcd_ES_tsendCmd>
    2784:	03 c0       	rjmp	.+6      	; 0x278c <LCD_ES_tGoTo+0x42>
		}
	}else{
		return ES_NOT_OK;
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	8b 83       	std	Y+3, r24	; 0x03
    278a:	01 c0       	rjmp	.+2      	; 0x278e <LCD_ES_tGoTo+0x44>
	}
	return ES_OK;
    278c:	1b 82       	std	Y+3, r1	; 0x03
    278e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret

0000279c <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	65 97       	sbiw	r28, 0x15	; 21
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	9c 8b       	std	Y+20, r25	; 0x14
    27b2:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    27b4:	eb 89       	ldd	r30, Y+19	; 0x13
    27b6:	fc 89       	ldd	r31, Y+20	; 0x14
    27b8:	8f ef       	ldi	r24, 0xFF	; 255
    27ba:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    27bc:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    27be:	8b 89       	ldd	r24, Y+19	; 0x13
    27c0:	9c 89       	ldd	r25, Y+20	; 0x14
    27c2:	00 97       	sbiw	r24, 0x00	; 0
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <KPD_ES_tGetKeyPressed+0x2c>
    27c6:	ed c0       	rjmp	.+474    	; 0x29a2 <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    27c8:	19 8a       	std	Y+17, r1	; 0x11
    27ca:	e5 c0       	rjmp	.+458    	; 0x2996 <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    27cc:	89 89       	ldd	r24, Y+17	; 0x11
    27ce:	88 2f       	mov	r24, r24
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	fc 01       	movw	r30, r24
    27d4:	e9 5f       	subi	r30, 0xF9	; 249
    27d6:	fe 4f       	sbci	r31, 0xFE	; 254
    27d8:	90 81       	ld	r25, Z
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	69 2f       	mov	r22, r25
    27de:	40 e0       	ldi	r20, 0x00	; 0
    27e0:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    27e4:	18 8a       	std	Y+16, r1	; 0x10
    27e6:	c1 c0       	rjmp	.+386    	; 0x296a <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    27e8:	88 89       	ldd	r24, Y+16	; 0x10
    27ea:	88 2f       	mov	r24, r24
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	fc 01       	movw	r30, r24
    27f0:	e5 5f       	subi	r30, 0xF5	; 245
    27f2:	fe 4f       	sbci	r31, 0xFE	; 254
    27f4:	90 81       	ld	r25, Z
    27f6:	9e 01       	movw	r18, r28
    27f8:	2e 5e       	subi	r18, 0xEE	; 238
    27fa:	3f 4f       	sbci	r19, 0xFF	; 255
    27fc:	83 e0       	ldi	r24, 0x03	; 3
    27fe:	69 2f       	mov	r22, r25
    2800:	a9 01       	movw	r20, r18
    2802:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    2806:	8a 89       	ldd	r24, Y+18	; 0x12
    2808:	88 23       	and	r24, r24
    280a:	09 f0       	breq	.+2      	; 0x280e <KPD_ES_tGetKeyPressed+0x72>
    280c:	ab c0       	rjmp	.+342    	; 0x2964 <KPD_ES_tGetKeyPressed+0x1c8>
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	a0 ea       	ldi	r26, 0xA0	; 160
    2814:	b1 e4       	ldi	r27, 0x41	; 65
    2816:	8b 87       	std	Y+11, r24	; 0x0b
    2818:	9c 87       	std	Y+12, r25	; 0x0c
    281a:	ad 87       	std	Y+13, r26	; 0x0d
    281c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2820:	7c 85       	ldd	r23, Y+12	; 0x0c
    2822:	8d 85       	ldd	r24, Y+13	; 0x0d
    2824:	9e 85       	ldd	r25, Y+14	; 0x0e
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	4a e7       	ldi	r20, 0x7A	; 122
    282c:	55 e4       	ldi	r21, 0x45	; 69
    282e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	8f 83       	std	Y+7, r24	; 0x07
    2838:	98 87       	std	Y+8, r25	; 0x08
    283a:	a9 87       	std	Y+9, r26	; 0x09
    283c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    283e:	6f 81       	ldd	r22, Y+7	; 0x07
    2840:	78 85       	ldd	r23, Y+8	; 0x08
    2842:	89 85       	ldd	r24, Y+9	; 0x09
    2844:	9a 85       	ldd	r25, Y+10	; 0x0a
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e8       	ldi	r20, 0x80	; 128
    284c:	5f e3       	ldi	r21, 0x3F	; 63
    284e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2852:	88 23       	and	r24, r24
    2854:	2c f4       	brge	.+10     	; 0x2860 <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	9e 83       	std	Y+6, r25	; 0x06
    285c:	8d 83       	std	Y+5, r24	; 0x05
    285e:	3f c0       	rjmp	.+126    	; 0x28de <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    2860:	6f 81       	ldd	r22, Y+7	; 0x07
    2862:	78 85       	ldd	r23, Y+8	; 0x08
    2864:	89 85       	ldd	r24, Y+9	; 0x09
    2866:	9a 85       	ldd	r25, Y+10	; 0x0a
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	3f ef       	ldi	r19, 0xFF	; 255
    286c:	4f e7       	ldi	r20, 0x7F	; 127
    286e:	57 e4       	ldi	r21, 0x47	; 71
    2870:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2874:	18 16       	cp	r1, r24
    2876:	4c f5       	brge	.+82     	; 0x28ca <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2878:	6b 85       	ldd	r22, Y+11	; 0x0b
    287a:	7c 85       	ldd	r23, Y+12	; 0x0c
    287c:	8d 85       	ldd	r24, Y+13	; 0x0d
    287e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	40 e2       	ldi	r20, 0x20	; 32
    2886:	51 e4       	ldi	r21, 0x41	; 65
    2888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	bc 01       	movw	r22, r24
    2892:	cd 01       	movw	r24, r26
    2894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	9e 83       	std	Y+6, r25	; 0x06
    289e:	8d 83       	std	Y+5, r24	; 0x05
    28a0:	0f c0       	rjmp	.+30     	; 0x28c0 <KPD_ES_tGetKeyPressed+0x124>
    28a2:	80 e9       	ldi	r24, 0x90	; 144
    28a4:	91 e0       	ldi	r25, 0x01	; 1
    28a6:	9c 83       	std	Y+4, r25	; 0x04
    28a8:	8b 83       	std	Y+3, r24	; 0x03
    28aa:	8b 81       	ldd	r24, Y+3	; 0x03
    28ac:	9c 81       	ldd	r25, Y+4	; 0x04
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <KPD_ES_tGetKeyPressed+0x112>
    28b2:	9c 83       	std	Y+4, r25	; 0x04
    28b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b6:	8d 81       	ldd	r24, Y+5	; 0x05
    28b8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	9e 83       	std	Y+6, r25	; 0x06
    28be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c0:	8d 81       	ldd	r24, Y+5	; 0x05
    28c2:	9e 81       	ldd	r25, Y+6	; 0x06
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	69 f7       	brne	.-38     	; 0x28a2 <KPD_ES_tGetKeyPressed+0x106>
    28c8:	14 c0       	rjmp	.+40     	; 0x28f2 <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ca:	6f 81       	ldd	r22, Y+7	; 0x07
    28cc:	78 85       	ldd	r23, Y+8	; 0x08
    28ce:	89 85       	ldd	r24, Y+9	; 0x09
    28d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	9e 83       	std	Y+6, r25	; 0x06
    28dc:	8d 83       	std	Y+5, r24	; 0x05
    28de:	8d 81       	ldd	r24, Y+5	; 0x05
    28e0:	9e 81       	ldd	r25, Y+6	; 0x06
    28e2:	9a 83       	std	Y+2, r25	; 0x02
    28e4:	89 83       	std	Y+1, r24	; 0x01
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <KPD_ES_tGetKeyPressed+0x14e>
    28ee:	9a 83       	std	Y+2, r25	; 0x02
    28f0:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    28f2:	88 89       	ldd	r24, Y+16	; 0x10
    28f4:	88 2f       	mov	r24, r24
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	fc 01       	movw	r30, r24
    28fa:	e5 5f       	subi	r30, 0xF5	; 245
    28fc:	fe 4f       	sbci	r31, 0xFE	; 254
    28fe:	90 81       	ld	r25, Z
    2900:	9e 01       	movw	r18, r28
    2902:	2e 5e       	subi	r18, 0xEE	; 238
    2904:	3f 4f       	sbci	r19, 0xFF	; 255
    2906:	83 e0       	ldi	r24, 0x03	; 3
    2908:	69 2f       	mov	r22, r25
    290a:	a9 01       	movw	r20, r18
    290c:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_ES_tGetPinValue>
    2910:	0f c0       	rjmp	.+30     	; 0x2930 <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    2912:	88 89       	ldd	r24, Y+16	; 0x10
    2914:	88 2f       	mov	r24, r24
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	fc 01       	movw	r30, r24
    291a:	e5 5f       	subi	r30, 0xF5	; 245
    291c:	fe 4f       	sbci	r31, 0xFE	; 254
    291e:	90 81       	ld	r25, Z
    2920:	9e 01       	movw	r18, r28
    2922:	2e 5e       	subi	r18, 0xEE	; 238
    2924:	3f 4f       	sbci	r19, 0xFF	; 255
    2926:	83 e0       	ldi	r24, 0x03	; 3
    2928:	69 2f       	mov	r22, r25
    292a:	a9 01       	movw	r20, r18
    292c:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    2930:	8a 89       	ldd	r24, Y+18	; 0x12
    2932:	88 23       	and	r24, r24
    2934:	71 f3       	breq	.-36     	; 0x2912 <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    2936:	89 89       	ldd	r24, Y+17	; 0x11
    2938:	48 2f       	mov	r20, r24
    293a:	50 e0       	ldi	r21, 0x00	; 0
    293c:	88 89       	ldd	r24, Y+16	; 0x10
    293e:	28 2f       	mov	r18, r24
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	ca 01       	movw	r24, r20
    2944:	88 0f       	add	r24, r24
    2946:	99 1f       	adc	r25, r25
    2948:	88 0f       	add	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	82 0f       	add	r24, r18
    294e:	93 1f       	adc	r25, r19
    2950:	fc 01       	movw	r30, r24
    2952:	e9 50       	subi	r30, 0x09	; 9
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	eb 89       	ldd	r30, Y+19	; 0x13
    295a:	fc 89       	ldd	r31, Y+20	; 0x14
    295c:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	8f 87       	std	Y+15, r24	; 0x0f
    2962:	07 c0       	rjmp	.+14     	; 0x2972 <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    2964:	88 89       	ldd	r24, Y+16	; 0x10
    2966:	8f 5f       	subi	r24, 0xFF	; 255
    2968:	88 8b       	std	Y+16, r24	; 0x10
    296a:	88 89       	ldd	r24, Y+16	; 0x10
    296c:	84 30       	cpi	r24, 0x04	; 4
    296e:	08 f4       	brcc	.+2      	; 0x2972 <KPD_ES_tGetKeyPressed+0x1d6>
    2970:	3b cf       	rjmp	.-394    	; 0x27e8 <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    2972:	89 89       	ldd	r24, Y+17	; 0x11
    2974:	88 2f       	mov	r24, r24
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	fc 01       	movw	r30, r24
    297a:	e9 5f       	subi	r30, 0xF9	; 249
    297c:	fe 4f       	sbci	r31, 0xFE	; 254
    297e:	90 81       	ld	r25, Z
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	69 2f       	mov	r22, r25
    2984:	41 e0       	ldi	r20, 0x01	; 1
    2986:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    298a:	8f 85       	ldd	r24, Y+15	; 0x0f
    298c:	81 30       	cpi	r24, 0x01	; 1
    298e:	39 f0       	breq	.+14     	; 0x299e <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    2990:	89 89       	ldd	r24, Y+17	; 0x11
    2992:	8f 5f       	subi	r24, 0xFF	; 255
    2994:	89 8b       	std	Y+17, r24	; 0x11
    2996:	89 89       	ldd	r24, Y+17	; 0x11
    2998:	84 30       	cpi	r24, 0x04	; 4
    299a:	08 f4       	brcc	.+2      	; 0x299e <KPD_ES_tGetKeyPressed+0x202>
    299c:	17 cf       	rjmp	.-466    	; 0x27cc <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    299e:	1d 8a       	std	Y+21, r1	; 0x15
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	8d 8b       	std	Y+21, r24	; 0x15
    29a6:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    29a8:	65 96       	adiw	r28, 0x15	; 21
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <exponent>:

u8 input[30] = {'\0'}; // Initialize input array
u8 indexz = 0;


int exponent(int base,int exp){
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	00 d0       	rcall	.+0      	; 0x29c0 <exponent+0x6>
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <exponent+0x8>
    29c2:	00 d0       	rcall	.+0      	; 0x29c4 <exponent+0xa>
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
    29c8:	9c 83       	std	Y+4, r25	; 0x04
    29ca:	8b 83       	std	Y+3, r24	; 0x03
    29cc:	7e 83       	std	Y+6, r23	; 0x06
    29ce:	6d 83       	std	Y+5, r22	; 0x05
    int result = 1;
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	9a 83       	std	Y+2, r25	; 0x02
    29d6:	89 83       	std	Y+1, r24	; 0x01
    29d8:	13 c0       	rjmp	.+38     	; 0x2a00 <exponent+0x46>
     while (exp != 0) {
        result = base * result;
    29da:	29 81       	ldd	r18, Y+1	; 0x01
    29dc:	3a 81       	ldd	r19, Y+2	; 0x02
    29de:	8b 81       	ldd	r24, Y+3	; 0x03
    29e0:	9c 81       	ldd	r25, Y+4	; 0x04
    29e2:	ac 01       	movw	r20, r24
    29e4:	24 9f       	mul	r18, r20
    29e6:	c0 01       	movw	r24, r0
    29e8:	25 9f       	mul	r18, r21
    29ea:	90 0d       	add	r25, r0
    29ec:	34 9f       	mul	r19, r20
    29ee:	90 0d       	add	r25, r0
    29f0:	11 24       	eor	r1, r1
    29f2:	9a 83       	std	Y+2, r25	; 0x02
    29f4:	89 83       	std	Y+1, r24	; 0x01
        --exp;
    29f6:	8d 81       	ldd	r24, Y+5	; 0x05
    29f8:	9e 81       	ldd	r25, Y+6	; 0x06
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	9e 83       	std	Y+6, r25	; 0x06
    29fe:	8d 83       	std	Y+5, r24	; 0x05
u8 indexz = 0;


int exponent(int base,int exp){
    int result = 1;
     while (exp != 0) {
    2a00:	8d 81       	ldd	r24, Y+5	; 0x05
    2a02:	9e 81       	ldd	r25, Y+6	; 0x06
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	49 f7       	brne	.-46     	; 0x29da <exponent+0x20>
        result = base * result;
        --exp;
    }
    return result;
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a0c:	26 96       	adiw	r28, 0x06	; 6
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	f8 94       	cli
    2a12:	de bf       	out	0x3e, r29	; 62
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	cd bf       	out	0x3d, r28	; 61
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	08 95       	ret

00002a1e <main>:


int main()
{
    2a1e:	0f 93       	push	r16
    2a20:	1f 93       	push	r17
    2a22:	df 93       	push	r29
    2a24:	cf 93       	push	r28
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	63 97       	sbiw	r28, 0x13	; 19
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	f8 94       	cli
    2a30:	de bf       	out	0x3e, r29	; 62
    2a32:	0f be       	out	0x3f, r0	; 63
    2a34:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tInit();
    2a36:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <DIO_ES_tInit>
	Lcd_ES_tInit();
    2a3a:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Lcd_ES_tInit>

	u8 Value;



	Lcd_ES_tsendString("Atmega32");
    2a3e:	80 e6       	ldi	r24, 0x60	; 96
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	0e 94 53 10 	call	0x20a6	; 0x20a6 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(1, 0);
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	60 e0       	ldi	r22, 0x00	; 0
    2a4a:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_ES_tGoTo>
	Lcd_ES_tsendString("Calculator !");
    2a4e:	89 e6       	ldi	r24, 0x69	; 105
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	0e 94 53 10 	call	0x20a6	; 0x20a6 <Lcd_ES_tsendString>
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	aa ef       	ldi	r26, 0xFA	; 250
    2a5c:	b3 e4       	ldi	r27, 0x43	; 67
    2a5e:	8b 87       	std	Y+11, r24	; 0x0b
    2a60:	9c 87       	std	Y+12, r25	; 0x0c
    2a62:	ad 87       	std	Y+13, r26	; 0x0d
    2a64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	4a e7       	ldi	r20, 0x7A	; 122
    2a74:	55 e4       	ldi	r21, 0x45	; 69
    2a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	8f 83       	std	Y+7, r24	; 0x07
    2a80:	98 87       	std	Y+8, r25	; 0x08
    2a82:	a9 87       	std	Y+9, r26	; 0x09
    2a84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a86:	6f 81       	ldd	r22, Y+7	; 0x07
    2a88:	78 85       	ldd	r23, Y+8	; 0x08
    2a8a:	89 85       	ldd	r24, Y+9	; 0x09
    2a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e8       	ldi	r20, 0x80	; 128
    2a94:	5f e3       	ldi	r21, 0x3F	; 63
    2a96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a9a:	88 23       	and	r24, r24
    2a9c:	2c f4       	brge	.+10     	; 0x2aa8 <main+0x8a>
		__ticks = 1;
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	9e 83       	std	Y+6, r25	; 0x06
    2aa4:	8d 83       	std	Y+5, r24	; 0x05
    2aa6:	3f c0       	rjmp	.+126    	; 0x2b26 <main+0x108>
	else if (__tmp > 65535)
    2aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aaa:	78 85       	ldd	r23, Y+8	; 0x08
    2aac:	89 85       	ldd	r24, Y+9	; 0x09
    2aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	3f ef       	ldi	r19, 0xFF	; 255
    2ab4:	4f e7       	ldi	r20, 0x7F	; 127
    2ab6:	57 e4       	ldi	r21, 0x47	; 71
    2ab8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2abc:	18 16       	cp	r1, r24
    2abe:	4c f5       	brge	.+82     	; 0x2b12 <main+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	40 e2       	ldi	r20, 0x20	; 32
    2ace:	51 e4       	ldi	r21, 0x41	; 65
    2ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	bc 01       	movw	r22, r24
    2ada:	cd 01       	movw	r24, r26
    2adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
    2ae8:	0f c0       	rjmp	.+30     	; 0x2b08 <main+0xea>
    2aea:	80 e9       	ldi	r24, 0x90	; 144
    2aec:	91 e0       	ldi	r25, 0x01	; 1
    2aee:	9c 83       	std	Y+4, r25	; 0x04
    2af0:	8b 83       	std	Y+3, r24	; 0x03
    2af2:	8b 81       	ldd	r24, Y+3	; 0x03
    2af4:	9c 81       	ldd	r25, Y+4	; 0x04
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <main+0xd8>
    2afa:	9c 83       	std	Y+4, r25	; 0x04
    2afc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afe:	8d 81       	ldd	r24, Y+5	; 0x05
    2b00:	9e 81       	ldd	r25, Y+6	; 0x06
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	9e 83       	std	Y+6, r25	; 0x06
    2b06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b08:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0c:	00 97       	sbiw	r24, 0x00	; 0
    2b0e:	69 f7       	brne	.-38     	; 0x2aea <main+0xcc>
    2b10:	14 c0       	rjmp	.+40     	; 0x2b3a <main+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b12:	6f 81       	ldd	r22, Y+7	; 0x07
    2b14:	78 85       	ldd	r23, Y+8	; 0x08
    2b16:	89 85       	ldd	r24, Y+9	; 0x09
    2b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	9e 83       	std	Y+6, r25	; 0x06
    2b24:	8d 83       	std	Y+5, r24	; 0x05
    2b26:	8d 81       	ldd	r24, Y+5	; 0x05
    2b28:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2a:	9a 83       	std	Y+2, r25	; 0x02
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	9a 81       	ldd	r25, Y+2	; 0x02
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	f1 f7       	brne	.-4      	; 0x2b32 <main+0x114>
    2b36:	9a 83       	std	Y+2, r25	; 0x02
    2b38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	lcd_ES_tclear();
    2b3a:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <lcd_ES_tclear>

	while (1)
	{
		KPD_ES_tGetKeyPressed(&Value);
    2b3e:	ce 01       	movw	r24, r28
    2b40:	0f 96       	adiw	r24, 0x0f	; 15
    2b42:	0e 94 ce 13 	call	0x279c	; 0x279c <KPD_ES_tGetKeyPressed>
		if (Value != KPD_U8_NOT_PRESSED)
    2b46:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b48:	8f 3f       	cpi	r24, 0xFF	; 255
    2b4a:	c9 f3       	breq	.-14     	; 0x2b3e <main+0x120>
		{
			input[indexz] = Value; // Store input in array
    2b4c:	80 91 39 01 	lds	r24, 0x0139
    2b50:	88 2f       	mov	r24, r24
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	2f 85       	ldd	r18, Y+15	; 0x0f
    2b56:	fc 01       	movw	r30, r24
    2b58:	e5 5e       	subi	r30, 0xE5	; 229
    2b5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b5c:	20 83       	st	Z, r18
			Lcd_ES_tsendChar(input[indexz]);
    2b5e:	80 91 39 01 	lds	r24, 0x0139
    2b62:	88 2f       	mov	r24, r24
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	fc 01       	movw	r30, r24
    2b68:	e5 5e       	subi	r30, 0xE5	; 229
    2b6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b6c:	80 81       	ld	r24, Z
    2b6e:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <Lcd_ES_tsendChar>
			indexz++; // Increment index
    2b72:	80 91 39 01 	lds	r24, 0x0139
    2b76:	8f 5f       	subi	r24, 0xFF	; 255
    2b78:	80 93 39 01 	sts	0x0139, r24

			switch (input[indexz - 1])
    2b7c:	80 91 39 01 	lds	r24, 0x0139
    2b80:	88 2f       	mov	r24, r24
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	fc 01       	movw	r30, r24
    2b88:	e5 5e       	subi	r30, 0xE5	; 229
    2b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b8c:	80 81       	ld	r24, Z
    2b8e:	28 2f       	mov	r18, r24
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	3b 8b       	std	Y+19, r19	; 0x13
    2b94:	2a 8b       	std	Y+18, r18	; 0x12
    2b96:	4a 89       	ldd	r20, Y+18	; 0x12
    2b98:	5b 89       	ldd	r21, Y+19	; 0x13
    2b9a:	4f 32       	cpi	r20, 0x2F	; 47
    2b9c:	51 05       	cpc	r21, r1
    2b9e:	11 f1       	breq	.+68     	; 0x2be4 <main+0x1c6>
    2ba0:	8a 89       	ldd	r24, Y+18	; 0x12
    2ba2:	9b 89       	ldd	r25, Y+19	; 0x13
    2ba4:	80 33       	cpi	r24, 0x30	; 48
    2ba6:	91 05       	cpc	r25, r1
    2ba8:	84 f4       	brge	.+32     	; 0x2bca <main+0x1ac>
    2baa:	2a 89       	ldd	r18, Y+18	; 0x12
    2bac:	3b 89       	ldd	r19, Y+19	; 0x13
    2bae:	2a 32       	cpi	r18, 0x2A	; 42
    2bb0:	31 05       	cpc	r19, r1
    2bb2:	2c f2       	brlt	.-118    	; 0x2b3e <main+0x120>
    2bb4:	4a 89       	ldd	r20, Y+18	; 0x12
    2bb6:	5b 89       	ldd	r21, Y+19	; 0x13
    2bb8:	4c 32       	cpi	r20, 0x2C	; 44
    2bba:	51 05       	cpc	r21, r1
    2bbc:	9c f0       	brlt	.+38     	; 0x2be4 <main+0x1c6>
    2bbe:	8a 89       	ldd	r24, Y+18	; 0x12
    2bc0:	9b 89       	ldd	r25, Y+19	; 0x13
    2bc2:	8d 32       	cpi	r24, 0x2D	; 45
    2bc4:	91 05       	cpc	r25, r1
    2bc6:	71 f0       	breq	.+28     	; 0x2be4 <main+0x1c6>
    2bc8:	ba cf       	rjmp	.-140    	; 0x2b3e <main+0x120>
    2bca:	2a 89       	ldd	r18, Y+18	; 0x12
    2bcc:	3b 89       	ldd	r19, Y+19	; 0x13
    2bce:	2d 33       	cpi	r18, 0x3D	; 61
    2bd0:	31 05       	cpc	r19, r1
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <main+0x1b8>
    2bd4:	68 c0       	rjmp	.+208    	; 0x2ca6 <main+0x288>
    2bd6:	4a 89       	ldd	r20, Y+18	; 0x12
    2bd8:	5b 89       	ldd	r21, Y+19	; 0x13
    2bda:	43 34       	cpi	r20, 0x43	; 67
    2bdc:	51 05       	cpc	r21, r1
    2bde:	09 f4       	brne	.+2      	; 0x2be2 <main+0x1c4>
    2be0:	3b c1       	rjmp	.+630    	; 0x2e58 <main+0x43a>
    2be2:	ad cf       	rjmp	.-166    	; 0x2b3e <main+0x120>
			{
			case '+':
			case '*':
			case '-':
			case '/':
				operation = input[indexz - 1];
    2be4:	80 91 39 01 	lds	r24, 0x0139
    2be8:	88 2f       	mov	r24, r24
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	fc 01       	movw	r30, r24
    2bf0:	e5 5e       	subi	r30, 0xE5	; 229
    2bf2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf4:	80 81       	ld	r24, Z
    2bf6:	80 93 1a 01 	sts	0x011A, r24
				for (i = indexz - 2, j = 0; i >= 0; i--, j++)
    2bfa:	80 91 39 01 	lds	r24, 0x0139
    2bfe:	88 2f       	mov	r24, r24
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	02 97       	sbiw	r24, 0x02	; 2
    2c04:	90 93 11 01 	sts	0x0111, r25
    2c08:	80 93 10 01 	sts	0x0110, r24
    2c0c:	10 92 13 01 	sts	0x0113, r1
    2c10:	10 92 12 01 	sts	0x0112, r1
    2c14:	39 c0       	rjmp	.+114    	; 0x2c88 <main+0x26a>
				{
					firstOperand += ((input[i] - '0') * exponent(10, j));
    2c16:	80 91 10 01 	lds	r24, 0x0110
    2c1a:	90 91 11 01 	lds	r25, 0x0111
    2c1e:	fc 01       	movw	r30, r24
    2c20:	e5 5e       	subi	r30, 0xE5	; 229
    2c22:	fe 4f       	sbci	r31, 0xFE	; 254
    2c24:	80 81       	ld	r24, Z
    2c26:	88 2f       	mov	r24, r24
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	8c 01       	movw	r16, r24
    2c2c:	00 53       	subi	r16, 0x30	; 48
    2c2e:	10 40       	sbci	r17, 0x00	; 0
    2c30:	20 91 12 01 	lds	r18, 0x0112
    2c34:	30 91 13 01 	lds	r19, 0x0113
    2c38:	8a e0       	ldi	r24, 0x0A	; 10
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	b9 01       	movw	r22, r18
    2c3e:	0e 94 dd 14 	call	0x29ba	; 0x29ba <exponent>
    2c42:	08 9f       	mul	r16, r24
    2c44:	90 01       	movw	r18, r0
    2c46:	09 9f       	mul	r16, r25
    2c48:	30 0d       	add	r19, r0
    2c4a:	18 9f       	mul	r17, r24
    2c4c:	30 0d       	add	r19, r0
    2c4e:	11 24       	eor	r1, r1
    2c50:	80 91 14 01 	lds	r24, 0x0114
    2c54:	90 91 15 01 	lds	r25, 0x0115
    2c58:	82 0f       	add	r24, r18
    2c5a:	93 1f       	adc	r25, r19
    2c5c:	90 93 15 01 	sts	0x0115, r25
    2c60:	80 93 14 01 	sts	0x0114, r24
			case '+':
			case '*':
			case '-':
			case '/':
				operation = input[indexz - 1];
				for (i = indexz - 2, j = 0; i >= 0; i--, j++)
    2c64:	80 91 10 01 	lds	r24, 0x0110
    2c68:	90 91 11 01 	lds	r25, 0x0111
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	90 93 11 01 	sts	0x0111, r25
    2c72:	80 93 10 01 	sts	0x0110, r24
    2c76:	80 91 12 01 	lds	r24, 0x0112
    2c7a:	90 91 13 01 	lds	r25, 0x0113
    2c7e:	01 96       	adiw	r24, 0x01	; 1
    2c80:	90 93 13 01 	sts	0x0113, r25
    2c84:	80 93 12 01 	sts	0x0112, r24
    2c88:	80 91 10 01 	lds	r24, 0x0110
    2c8c:	90 91 11 01 	lds	r25, 0x0111
    2c90:	99 23       	and	r25, r25
    2c92:	0c f6       	brge	.-126    	; 0x2c16 <main+0x1f8>
				{
					firstOperand += ((input[i] - '0') * exponent(10, j));
				}
				entryToSecond = indexz;
    2c94:	80 91 39 01 	lds	r24, 0x0139
    2c98:	88 2f       	mov	r24, r24
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	90 93 19 01 	sts	0x0119, r25
    2ca0:	80 93 18 01 	sts	0x0118, r24
    2ca4:	4c cf       	rjmp	.-360    	; 0x2b3e <main+0x120>
				break;
			case '=':
				for (i = indexz - 2, j = 0; i >= entryToSecond; i--, j++)
    2ca6:	80 91 39 01 	lds	r24, 0x0139
    2caa:	88 2f       	mov	r24, r24
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	02 97       	sbiw	r24, 0x02	; 2
    2cb0:	90 93 11 01 	sts	0x0111, r25
    2cb4:	80 93 10 01 	sts	0x0110, r24
    2cb8:	10 92 13 01 	sts	0x0113, r1
    2cbc:	10 92 12 01 	sts	0x0112, r1
    2cc0:	39 c0       	rjmp	.+114    	; 0x2d34 <main+0x316>
				{
					secondOperand += ((input[i] - '0') * exponent(10, j));
    2cc2:	80 91 10 01 	lds	r24, 0x0110
    2cc6:	90 91 11 01 	lds	r25, 0x0111
    2cca:	fc 01       	movw	r30, r24
    2ccc:	e5 5e       	subi	r30, 0xE5	; 229
    2cce:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd0:	80 81       	ld	r24, Z
    2cd2:	88 2f       	mov	r24, r24
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	8c 01       	movw	r16, r24
    2cd8:	00 53       	subi	r16, 0x30	; 48
    2cda:	10 40       	sbci	r17, 0x00	; 0
    2cdc:	20 91 12 01 	lds	r18, 0x0112
    2ce0:	30 91 13 01 	lds	r19, 0x0113
    2ce4:	8a e0       	ldi	r24, 0x0A	; 10
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	b9 01       	movw	r22, r18
    2cea:	0e 94 dd 14 	call	0x29ba	; 0x29ba <exponent>
    2cee:	08 9f       	mul	r16, r24
    2cf0:	90 01       	movw	r18, r0
    2cf2:	09 9f       	mul	r16, r25
    2cf4:	30 0d       	add	r19, r0
    2cf6:	18 9f       	mul	r17, r24
    2cf8:	30 0d       	add	r19, r0
    2cfa:	11 24       	eor	r1, r1
    2cfc:	80 91 16 01 	lds	r24, 0x0116
    2d00:	90 91 17 01 	lds	r25, 0x0117
    2d04:	82 0f       	add	r24, r18
    2d06:	93 1f       	adc	r25, r19
    2d08:	90 93 17 01 	sts	0x0117, r25
    2d0c:	80 93 16 01 	sts	0x0116, r24
					firstOperand += ((input[i] - '0') * exponent(10, j));
				}
				entryToSecond = indexz;
				break;
			case '=':
				for (i = indexz - 2, j = 0; i >= entryToSecond; i--, j++)
    2d10:	80 91 10 01 	lds	r24, 0x0110
    2d14:	90 91 11 01 	lds	r25, 0x0111
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	90 93 11 01 	sts	0x0111, r25
    2d1e:	80 93 10 01 	sts	0x0110, r24
    2d22:	80 91 12 01 	lds	r24, 0x0112
    2d26:	90 91 13 01 	lds	r25, 0x0113
    2d2a:	01 96       	adiw	r24, 0x01	; 1
    2d2c:	90 93 13 01 	sts	0x0113, r25
    2d30:	80 93 12 01 	sts	0x0112, r24
    2d34:	20 91 10 01 	lds	r18, 0x0110
    2d38:	30 91 11 01 	lds	r19, 0x0111
    2d3c:	80 91 18 01 	lds	r24, 0x0118
    2d40:	90 91 19 01 	lds	r25, 0x0119
    2d44:	28 17       	cp	r18, r24
    2d46:	39 07       	cpc	r19, r25
    2d48:	0c f0       	brlt	.+2      	; 0x2d4c <main+0x32e>
    2d4a:	bb cf       	rjmp	.-138    	; 0x2cc2 <main+0x2a4>
				{
					secondOperand += ((input[i] - '0') * exponent(10, j));
				}
				LCD_ES_tGoTo(1, 0);
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	60 e0       	ldi	r22, 0x00	; 0
    2d50:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_ES_tGoTo>
				switch (operation)
    2d54:	80 91 1a 01 	lds	r24, 0x011A
    2d58:	28 2f       	mov	r18, r24
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	39 8b       	std	Y+17, r19	; 0x11
    2d5e:	28 8b       	std	Y+16, r18	; 0x10
    2d60:	48 89       	ldd	r20, Y+16	; 0x10
    2d62:	59 89       	ldd	r21, Y+17	; 0x11
    2d64:	4b 32       	cpi	r20, 0x2B	; 43
    2d66:	51 05       	cpc	r21, r1
    2d68:	b1 f0       	breq	.+44     	; 0x2d96 <main+0x378>
    2d6a:	88 89       	ldd	r24, Y+16	; 0x10
    2d6c:	99 89       	ldd	r25, Y+17	; 0x11
    2d6e:	8c 32       	cpi	r24, 0x2C	; 44
    2d70:	91 05       	cpc	r25, r1
    2d72:	34 f4       	brge	.+12     	; 0x2d80 <main+0x362>
    2d74:	28 89       	ldd	r18, Y+16	; 0x10
    2d76:	39 89       	ldd	r19, Y+17	; 0x11
    2d78:	2a 32       	cpi	r18, 0x2A	; 42
    2d7a:	31 05       	cpc	r19, r1
    2d7c:	41 f1       	breq	.+80     	; 0x2dce <main+0x3b0>
    2d7e:	61 c0       	rjmp	.+194    	; 0x2e42 <main+0x424>
    2d80:	48 89       	ldd	r20, Y+16	; 0x10
    2d82:	59 89       	ldd	r21, Y+17	; 0x11
    2d84:	4d 32       	cpi	r20, 0x2D	; 45
    2d86:	51 05       	cpc	r21, r1
    2d88:	99 f0       	breq	.+38     	; 0x2db0 <main+0x392>
    2d8a:	88 89       	ldd	r24, Y+16	; 0x10
    2d8c:	99 89       	ldd	r25, Y+17	; 0x11
    2d8e:	8f 32       	cpi	r24, 0x2F	; 47
    2d90:	91 05       	cpc	r25, r1
    2d92:	81 f1       	breq	.+96     	; 0x2df4 <main+0x3d6>
    2d94:	56 c0       	rjmp	.+172    	; 0x2e42 <main+0x424>
				{
				case '+':
					Lcd_ES_tdisplayNum(firstOperand + secondOperand);
    2d96:	20 91 14 01 	lds	r18, 0x0114
    2d9a:	30 91 15 01 	lds	r19, 0x0115
    2d9e:	80 91 16 01 	lds	r24, 0x0116
    2da2:	90 91 17 01 	lds	r25, 0x0117
    2da6:	82 0f       	add	r24, r18
    2da8:	93 1f       	adc	r25, r19
    2daa:	0e 94 ab 10 	call	0x2156	; 0x2156 <Lcd_ES_tdisplayNum>
    2dae:	49 c0       	rjmp	.+146    	; 0x2e42 <main+0x424>
					break;
				case '-':
					Lcd_ES_tdisplayNum(firstOperand - secondOperand);
    2db0:	20 91 14 01 	lds	r18, 0x0114
    2db4:	30 91 15 01 	lds	r19, 0x0115
    2db8:	80 91 16 01 	lds	r24, 0x0116
    2dbc:	90 91 17 01 	lds	r25, 0x0117
    2dc0:	a9 01       	movw	r20, r18
    2dc2:	48 1b       	sub	r20, r24
    2dc4:	59 0b       	sbc	r21, r25
    2dc6:	ca 01       	movw	r24, r20
    2dc8:	0e 94 ab 10 	call	0x2156	; 0x2156 <Lcd_ES_tdisplayNum>
    2dcc:	3a c0       	rjmp	.+116    	; 0x2e42 <main+0x424>
					break;
				case '*':
					Lcd_ES_tdisplayNum(firstOperand * secondOperand);
    2dce:	20 91 14 01 	lds	r18, 0x0114
    2dd2:	30 91 15 01 	lds	r19, 0x0115
    2dd6:	80 91 16 01 	lds	r24, 0x0116
    2dda:	90 91 17 01 	lds	r25, 0x0117
    2dde:	ac 01       	movw	r20, r24
    2de0:	24 9f       	mul	r18, r20
    2de2:	c0 01       	movw	r24, r0
    2de4:	25 9f       	mul	r18, r21
    2de6:	90 0d       	add	r25, r0
    2de8:	34 9f       	mul	r19, r20
    2dea:	90 0d       	add	r25, r0
    2dec:	11 24       	eor	r1, r1
    2dee:	0e 94 ab 10 	call	0x2156	; 0x2156 <Lcd_ES_tdisplayNum>
    2df2:	27 c0       	rjmp	.+78     	; 0x2e42 <main+0x424>
					break;
				case '/':
					if(secondOperand == 0){
    2df4:	80 91 16 01 	lds	r24, 0x0116
    2df8:	90 91 17 01 	lds	r25, 0x0117
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	99 f4       	brne	.+38     	; 0x2e26 <main+0x408>
						lcd_ES_tclear();
    2e00:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <lcd_ES_tclear>
						LCD_ES_tGoTo(0, 0);
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	60 e0       	ldi	r22, 0x00	; 0
    2e08:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_ES_tGoTo>
						Lcd_ES_tsendString("ERROR: ");
    2e0c:	86 e7       	ldi	r24, 0x76	; 118
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	0e 94 53 10 	call	0x20a6	; 0x20a6 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(1, 0);
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	60 e0       	ldi	r22, 0x00	; 0
    2e18:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_ES_tGoTo>
						Lcd_ES_tsendString("Division by zero");
    2e1c:	8e e7       	ldi	r24, 0x7E	; 126
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	0e 94 53 10 	call	0x20a6	; 0x20a6 <Lcd_ES_tsendString>
    2e24:	0e c0       	rjmp	.+28     	; 0x2e42 <main+0x424>
					}else{
						Lcd_ES_tdisplayNum(firstOperand / secondOperand);
    2e26:	80 91 14 01 	lds	r24, 0x0114
    2e2a:	90 91 15 01 	lds	r25, 0x0115
    2e2e:	20 91 16 01 	lds	r18, 0x0116
    2e32:	30 91 17 01 	lds	r19, 0x0117
    2e36:	b9 01       	movw	r22, r18
    2e38:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__divmodhi4>
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	0e 94 ab 10 	call	0x2156	; 0x2156 <Lcd_ES_tdisplayNum>
					}
					break;
				}

				// Reset variables
				firstOperand = 0;
    2e42:	10 92 15 01 	sts	0x0115, r1
    2e46:	10 92 14 01 	sts	0x0114, r1
				secondOperand = 0;
    2e4a:	10 92 17 01 	sts	0x0117, r1
    2e4e:	10 92 16 01 	sts	0x0116, r1
				indexz = 0;
    2e52:	10 92 39 01 	sts	0x0139, r1
    2e56:	73 ce       	rjmp	.-794    	; 0x2b3e <main+0x120>

				break;
			case 'C':
				lcd_ES_tclear();
    2e58:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <lcd_ES_tclear>
				firstOperand = 0;
    2e5c:	10 92 15 01 	sts	0x0115, r1
    2e60:	10 92 14 01 	sts	0x0114, r1
				secondOperand = 0;
    2e64:	10 92 17 01 	sts	0x0117, r1
    2e68:	10 92 16 01 	sts	0x0116, r1
				indexz = 0;
    2e6c:	10 92 39 01 	sts	0x0139, r1
    2e70:	66 ce       	rjmp	.-820    	; 0x2b3e <main+0x120>

00002e72 <__udivmodhi4>:
    2e72:	aa 1b       	sub	r26, r26
    2e74:	bb 1b       	sub	r27, r27
    2e76:	51 e1       	ldi	r21, 0x11	; 17
    2e78:	07 c0       	rjmp	.+14     	; 0x2e88 <__udivmodhi4_ep>

00002e7a <__udivmodhi4_loop>:
    2e7a:	aa 1f       	adc	r26, r26
    2e7c:	bb 1f       	adc	r27, r27
    2e7e:	a6 17       	cp	r26, r22
    2e80:	b7 07       	cpc	r27, r23
    2e82:	10 f0       	brcs	.+4      	; 0x2e88 <__udivmodhi4_ep>
    2e84:	a6 1b       	sub	r26, r22
    2e86:	b7 0b       	sbc	r27, r23

00002e88 <__udivmodhi4_ep>:
    2e88:	88 1f       	adc	r24, r24
    2e8a:	99 1f       	adc	r25, r25
    2e8c:	5a 95       	dec	r21
    2e8e:	a9 f7       	brne	.-22     	; 0x2e7a <__udivmodhi4_loop>
    2e90:	80 95       	com	r24
    2e92:	90 95       	com	r25
    2e94:	bc 01       	movw	r22, r24
    2e96:	cd 01       	movw	r24, r26
    2e98:	08 95       	ret

00002e9a <__divmodhi4>:
    2e9a:	97 fb       	bst	r25, 7
    2e9c:	09 2e       	mov	r0, r25
    2e9e:	07 26       	eor	r0, r23
    2ea0:	0a d0       	rcall	.+20     	; 0x2eb6 <__divmodhi4_neg1>
    2ea2:	77 fd       	sbrc	r23, 7
    2ea4:	04 d0       	rcall	.+8      	; 0x2eae <__divmodhi4_neg2>
    2ea6:	e5 df       	rcall	.-54     	; 0x2e72 <__udivmodhi4>
    2ea8:	06 d0       	rcall	.+12     	; 0x2eb6 <__divmodhi4_neg1>
    2eaa:	00 20       	and	r0, r0
    2eac:	1a f4       	brpl	.+6      	; 0x2eb4 <__divmodhi4_exit>

00002eae <__divmodhi4_neg2>:
    2eae:	70 95       	com	r23
    2eb0:	61 95       	neg	r22
    2eb2:	7f 4f       	sbci	r23, 0xFF	; 255

00002eb4 <__divmodhi4_exit>:
    2eb4:	08 95       	ret

00002eb6 <__divmodhi4_neg1>:
    2eb6:	f6 f7       	brtc	.-4      	; 0x2eb4 <__divmodhi4_exit>
    2eb8:	90 95       	com	r25
    2eba:	81 95       	neg	r24
    2ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ebe:	08 95       	ret

00002ec0 <__prologue_saves__>:
    2ec0:	2f 92       	push	r2
    2ec2:	3f 92       	push	r3
    2ec4:	4f 92       	push	r4
    2ec6:	5f 92       	push	r5
    2ec8:	6f 92       	push	r6
    2eca:	7f 92       	push	r7
    2ecc:	8f 92       	push	r8
    2ece:	9f 92       	push	r9
    2ed0:	af 92       	push	r10
    2ed2:	bf 92       	push	r11
    2ed4:	cf 92       	push	r12
    2ed6:	df 92       	push	r13
    2ed8:	ef 92       	push	r14
    2eda:	ff 92       	push	r15
    2edc:	0f 93       	push	r16
    2ede:	1f 93       	push	r17
    2ee0:	cf 93       	push	r28
    2ee2:	df 93       	push	r29
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    2ee8:	ca 1b       	sub	r28, r26
    2eea:	db 0b       	sbc	r29, r27
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	09 94       	ijmp

00002ef8 <__epilogue_restores__>:
    2ef8:	2a 88       	ldd	r2, Y+18	; 0x12
    2efa:	39 88       	ldd	r3, Y+17	; 0x11
    2efc:	48 88       	ldd	r4, Y+16	; 0x10
    2efe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f00:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f02:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f04:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f06:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f08:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f0a:	b9 84       	ldd	r11, Y+9	; 0x09
    2f0c:	c8 84       	ldd	r12, Y+8	; 0x08
    2f0e:	df 80       	ldd	r13, Y+7	; 0x07
    2f10:	ee 80       	ldd	r14, Y+6	; 0x06
    2f12:	fd 80       	ldd	r15, Y+5	; 0x05
    2f14:	0c 81       	ldd	r16, Y+4	; 0x04
    2f16:	1b 81       	ldd	r17, Y+3	; 0x03
    2f18:	aa 81       	ldd	r26, Y+2	; 0x02
    2f1a:	b9 81       	ldd	r27, Y+1	; 0x01
    2f1c:	ce 0f       	add	r28, r30
    2f1e:	d1 1d       	adc	r29, r1
    2f20:	0f b6       	in	r0, 0x3f	; 63
    2f22:	f8 94       	cli
    2f24:	de bf       	out	0x3e, r29	; 62
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	cd bf       	out	0x3d, r28	; 61
    2f2a:	ed 01       	movw	r28, r26
    2f2c:	08 95       	ret

00002f2e <_exit>:
    2f2e:	f8 94       	cli

00002f30 <__stop_program>:
    2f30:	ff cf       	rjmp	.-2      	; 0x2f30 <__stop_program>
